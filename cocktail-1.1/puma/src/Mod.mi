IMPLEMENTATION MODULE Mod;













IMPORT SYSTEM, System, IO, Tree;
(* line 7 "" *)


FROM Positions	IMPORT tPosition;
FROM IO		IMPORT StdOutput, WriteS, WriteNl;
FROM StringMem	IMPORT WriteString;
FROM Idents	IMPORT tIdent, NoIdent;
FROM Texts	IMPORT WriteText;
FROM Sets	IMPORT IsElement, IsNotEqual, Minimum, Maximum, IsEmpty;
FROM Semantics	IMPORT IdentifyVar, LookupClass;
FROM Optimize	IMPORT NeedsTempo, NeedsMatch, NeedsNoFinale, GetRule;
FROM Tree	IMPORT NoTree, tTree, Options, f, SourceFile, WI, WN;

VAR
   RoutineKind	: (kProcedure, kFunction, kPredicate);
   i, j		: CARDINAL;
   ListCount	: INTEGER;
   rule		,
   TheClass	,
   InFormals	,
   OutFormals	,
   ReturnFormals,
   Decls	: tTree;
   TheName	: tIdent;
   TemposDone	: BOOLEAN;

PROCEDURE WriteLine (Line: tPosition);
   BEGIN
      IF Line.Line # 0 THEN
	 WriteS (f, "(* line "); WN (Line.Line); WriteS (f, ' "'); WriteS (f, SourceFile); WriteS (f, '" *)'); WriteNl (f);
      END;
   END WriteLine;

PROCEDURE Match (t, Formals: tTree);
   VAR TreeName	: tIdent;
   VAR Pattern	: tTree;
   BEGIN
      IF (t^.Kind = Tree.NoPattern) OR (Formals^.Kind # Tree.Formal) THEN RETURN; END;
      Pattern := t^.OnePattern.Pattern;
      CASE Pattern^.Kind OF
      | Tree.Decompose: WITH Pattern^.Decompose DO
	    TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;
	    IF (Formals^.Formal.TypeDesc^.Kind = Tree.UserType) OR
	       IsNotEqual (Object^.Class.TypeDesc^.NodeTypes.Types, Formals^.Formal.TypeDesc^.NodeTypes.Types) THEN
	       IF Object^.Class.Extensions^.Kind = Tree.NoClass THEN	(* Low ? *)
		  WriteS (f, "      IF ("); ImplMod (Path); WriteS (f, "^.Kind # "); 
	       ELSE
		  WriteS (f, "      IF NOT "); WI (TreeName); WriteS (f, ".IsType ("); ImplMod (Path); WriteS (f, ", "); 
	       END;
	       WI (TreeName); WriteS (f, "."); WI (Object^.Class.Name); WriteS (f, ") THEN EXIT; END;"); WriteNl (f);
	    END;
	    Match (Patterns, Object^.Class.Formals);
	 END;

      | Tree.VarDef: WITH Pattern^.VarDef DO
	    IF Object # NoTree THEN
	       WITH Object^.Formal DO
		  WriteS (f, "      IF NOT (equal"); ImplMod (TypeDesc); WriteS (f, " ("); ImplMod (Path);
		  WriteS (f, ", "); ImplMod (Pattern^.VarDef.Path); WriteS (f, ")) THEN EXIT; END;"); WriteNl (f);
	       END;
	    END;
	 END;

      | Tree.NilTest:
	 WriteS (f, "      IF "); ImplMod (Pattern^.NilTest.Path); WriteS (f, " # NIL THEN EXIT; END;"); WriteNl (f);

      | Tree.DontCare1:
      | Tree.DontCare: RETURN;

      | Tree.Value: WITH Pattern^.Value DO
	    AssignTempo (Expr);
	    WriteS (f, "      IF NOT (equal"); ImplMod (Formals^.Formal.TypeDesc);
	    WriteS (f, " ("); ImplMod (Path); WriteS (f, ", "); Expression (Expr); WriteS (f, ")) THEN EXIT; END;"); WriteNl (f);
	    MatchExpr (Expr);
	 END;
      END;
      Match (t^.OnePattern.Next, Formals^.Formal.Next);
   END Match;

PROCEDURE MatchExprs (t: tTree);
   BEGIN
      IF t^.Kind = Tree.NoExpr THEN RETURN; END;
      IF t^.OneExpr.Expr^.Kind = Tree.DontCare THEN RETURN; END;
      MatchExpr (t^.OneExpr.Expr);
      MatchExprs (t^.OneExpr.Next);
   END MatchExprs;

PROCEDURE MatchExpr (t: tTree);
   BEGIN
      CASE t^.Kind OF
      | Tree.Compose:
	 MatchExprs (t^.Compose.Exprs);

      | Tree.VarUse	:
      | Tree.Nil	:
      | Tree.DontCare1	:
      | Tree.TargetExpr	:
      | Tree.StringExpr	:
      | Tree.AttrDesc	:

      | Tree.Call	: WITH t^.Call DO
	    MatchExpr (Expr);
	    MatchExprs (Exprs);
	    IF Object # NoTree THEN
	       Match (Patterns, Object^.Routine.OutForm);
	    END;
	 END;

      | Tree.Binary	: WITH t^.Binary DO
	    MatchExpr (Lop);
	    MatchExpr (Rop);
	 END;

      | Tree.PreOperator, Tree.PostOperator	:
	 MatchExpr (t^.PreOperator.Expr);

      | Tree.Index	:
	 MatchExpr (t^.Index.Expr);
	 MatchExprs (t^.Index.Exprs);

      | Tree.Parents	:
	 MatchExpr (t^.Parents.Expr);
      END;
   END MatchExpr;

PROCEDURE AssignTempos (t: tTree);
   BEGIN
      IF t^.Kind = Tree.NoExpr THEN RETURN; END;
      IF t^.OneExpr.Expr^.Kind = Tree.DontCare THEN RETURN; END;
      AssignTempo (t^.OneExpr.Expr);
      AssignTempos (t^.OneExpr.Next);
   END AssignTempos;

PROCEDURE AssignTempo (t: tTree);
   VAR TreeName	: tIdent;
   BEGIN
      CASE t^.Kind OF
      | Tree.Compose: WITH t^.Compose DO
	    TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;
	    WriteS (f, "      yyALLOC ("); WI (TreeName); WriteS (f, ",Make"); WI (TreeName); WriteS (f, ","); WI (Tempo); WriteS (f, ","); WI (Object^.Class.Name); WriteS (f, ")"); WriteNl (f);
	    IF (Exprs^.Kind = Tree.OneExpr) AND (Exprs^.OneExpr.Expr^.Kind # Tree.DontCare) THEN
	       WriteS (f, "      WITH "); WI (Tempo); WriteS (f, "^."); WI (Object^.Class.Name); WriteS (f, " DO"); WriteNl (f);
	       AssignFormals (Exprs, Object^.Class.Formals);
	       WriteS (f, "      END;"); WriteNl (f);
	    END;
	 END;

      | Tree.VarUse	:
      | Tree.Nil	:
      | Tree.DontCare1	:
      | Tree.TargetExpr	:
      | Tree.StringExpr	:
      | Tree.AttrDesc	:

      | Tree.Call	: WITH t^.Call DO
	    AssignTempo (Expr);
	    AssignTempos (Exprs);
	 END;

      | Tree.Binary	: WITH t^.Binary DO
	    AssignTempo (Lop);
	    AssignTempo (Rop);
	 END;

      | Tree.PreOperator, Tree.PostOperator	:
	 AssignTempo (t^.PreOperator.Expr);

      | Tree.Index	:
	 AssignTempo (t^.Index.Expr);
	 AssignTempos (t^.Index.Exprs);

      | Tree.Parents	:
	 AssignTempo (t^.Parents.Expr);
      END;
   END AssignTempo;

PROCEDURE AssignFormals (t, Formals: tTree);
   BEGIN
      IF (t^.Kind = Tree.NoExpr) OR (Formals^.Kind # Tree.Formal) THEN RETURN; END;
      IF t^.OneExpr.Expr^.Kind = Tree.DontCare THEN
	 BeginFormals (Formals);
	 RETURN;
      END;
      AssignFormal (t^.OneExpr.Expr, Formals);
      AssignFormals (t^.OneExpr.Next, Formals^.Formal.Next);
   END AssignFormals;

PROCEDURE AssignFormal (t, Formals: tTree);
   VAR TreeName	: tIdent;
   BEGIN
      IF t^.Kind = Tree.Compose THEN
	 WITH t^.Compose DO
	    TreeName := Object^.Class.TypeDesc^.NodeTypes.TreeName^.TreeName.Name;
	    WriteS (f, "      yyALLOC ("); WI (TreeName); WriteS (f, ",Make"); WI (TreeName); WriteS (f, ","); WI (Formals^.Formal.Name); WriteS (f, ","); WI (Object^.Class.Name); WriteS (f, ")"); WriteNl (f);
	    IF (Exprs^.Kind = Tree.OneExpr) AND (Exprs^.OneExpr.Expr^.Kind # Tree.DontCare) THEN
	       WriteS (f, "      WITH "); WI (Formals^.Formal.Name); WriteS (f, "^."); WI (Object^.Class.Name); WriteS (f, " DO"); WriteNl (f);
	       AssignFormals (Exprs, Object^.Class.Formals);
	       WriteS (f, "      END;"); WriteNl (f);
	    END;
	 END;
      ELSE
	 AssignTempo (t);
      END;

      CASE t^.Kind OF
      | Tree.VarUse, Tree.Nil, Tree.Call, Tree.Binary, Tree.PreOperator,
	Tree.PostOperator, Tree.Index, Tree.Parents, Tree.TargetExpr, Tree.StringExpr,
	Tree.AttrDesc:
	 WriteS (f, "      "); WI (Formals^.Formal.Name); WriteS (f, " := "); Expression (t); WriteS (f, ";"); WriteNl (f);
      | Tree.DontCare1:
	 WriteS (f, "      begin"); ImplMod (Formals^.Formal.TypeDesc); WriteS (f, " ("); WI (Formals^.Formal.Name); WriteS (f, ")"); WriteNl (f);
      ELSE
      END;
   END AssignFormal;

PROCEDURE BeginFormals (Formals: tTree);
   BEGIN
      IF Formals^.Kind = Tree.Formal THEN
	 WITH Formals^.Formal DO
	    WriteS (f, "      begin"); ImplMod (TypeDesc); WriteS (f, " ("); WI (Name); WriteS (f, ")"); WriteNl (f);
	    BeginFormals (Next);
	 END;
      END;
   END BeginFormals;

PROCEDURE ConsPatterns (t: tTree; ListCount: INTEGER): INTEGER;
   BEGIN
      IF t^.Kind = Tree.NoPattern THEN RETURN ListCount; END;
      WITH t^.OnePattern DO
	 IF Pattern^.Kind = Tree.DontCare THEN
	    RETURN ConsTempos (Pattern^.DontCare.Tempos, ListCount);
	 ELSE
	    IF ListCount > 0 THEN WriteS (f, ", "); END;
	    WI (Pattern^.Pattern.Tempo);
	    RETURN ConsPatterns (Next, ListCount + 1);
	 END;
      END;
   END ConsPatterns;

PROCEDURE ConsTempos (t: tTree; ListCount: INTEGER): INTEGER;
   BEGIN
      IF t^.Kind = Tree.Formal THEN
	 IF ListCount > 0 THEN WriteS (f, ", "); END;
	 WI (t^.Formal.Name);
	 RETURN ConsTempos (t^.Formal.Next, ListCount + 1);
      ELSE
	 RETURN ListCount;
      END;
   END ConsTempos;

PROCEDURE Expressions (t: tTree; ListCount: INTEGER): INTEGER;
   BEGIN
      IF t^.Kind = Tree.NoExpr THEN RETURN ListCount; END;
      WITH t^.OneExpr DO
	 IF Expr^.Kind = Tree.DontCare THEN
	    RETURN ConsTempos (Expr^.DontCare.Tempos, ListCount);
	 ELSE
	    IF ListCount > 0 THEN WriteS (f, ", "); END;
	    Expression (Expr);
	    RETURN Expressions (Next, ListCount + 1);
	 END;
      END;
   END Expressions;

PROCEDURE Expression (t: tTree);
   BEGIN
      CASE t^.Kind OF
      | Tree.Compose	: WI (t^.Compose.Tempo);

      | Tree.Nil	: WriteS (f, "NIL"); 

      | Tree.VarUse	: WITH t^.VarUse DO
	    IF Object # NoTree THEN
	       ImplMod (Object^.Formal.Path);
	    ELSE
	       WI (Name);
	    END;
	 END;

      | Tree.DontCare1	: WI (t^.DontCare1.Tempo);

      | Tree.Call	: WITH t^.Call DO
	    Expression (Expr); WriteS (f, " ("); 
	    ListCount := Expressions (Exprs, 0);
	    IF Object # NoTree THEN
	       ListCount := ConsPatterns (Patterns, ListCount);
	    ELSE
	       ListCount := Expressions (Patterns, ListCount);
	    END;
	    WriteS (f, ")"); 
	 END;

      | Tree.Binary	: WITH t^.Binary DO
	    Expression (Lop); WriteS (f, " "); WI (Operator); WriteS (f, " "); Expression (Rop);
	 END;

      | Tree.PreOperator	:
	 WI (t^.PreOperator.Operator); WriteS (f, " "); Expression (t^.PreOperator.Expr);

      | Tree.PostOperator	:
	 Expression (t^.PostOperator.Expr); WriteS (f, " "); WI (t^.PostOperator.Operator);

      | Tree.Index	:
	 Expression (t^.Index.Expr); WriteS (f, " ["); ListCount := Expressions (t^.Index.Exprs, 0); WriteS (f, "]"); 

      | Tree.Parents	: WriteS (f, "("); Expression (t^.Parents.Expr); WriteS (f, ")"); 

      | Tree.TargetExpr	: ImplMod (t^.TargetExpr.Expr);

      | Tree.StringExpr	: WriteString (f, t^.StringExpr.String);

      | Tree.AttrDesc	: WITH t^.AttrDesc DO
	    ImplMod (Object^.Formal.Path); WriteS (f, "^."); WI (Type); WriteS (f, "."); WI (Attribute);
	 END;
      END;
   END Expression;

PROCEDURE Tg2 (t, Formals: tTree);
   BEGIN
      IF (t^.Kind = Tree.NoPattern) OR (Formals^.Kind = Tree.NoFormal) THEN RETURN; END;
      CASE t^.OnePattern.Pattern^.Kind OF
      | Tree.Decompose:
	 WriteS (f, "     WITH "); WI (Formals^.Formal.Name); WriteS (f, "^."); WI (t^.OnePattern.Pattern^.Decompose.Object^.Class.Name); WriteS (f, " DO"); WriteNl (f);
      | Tree.VarDef, Tree.NilTest, Tree.Value, Tree.DontCare1:
      ELSE RETURN;
      END;
      Tg2 (t^.OnePattern.Next, Formals^.Formal.Next);
   END Tg2;


























































PROCEDURE yyAbort (yyFunction: ARRAY OF CHAR);
 BEGIN
  IO.WriteS (IO.StdError, 'Error: module Mod, routine ');
  IO.WriteS (IO.StdError, yyFunction);
  IO.WriteS (IO.StdError, ' failed');
  IO.WriteNl (IO.StdError);
  Exit;
 END yyAbort;

PROCEDURE yyIsEqual (yya, yyb: ARRAY OF SYSTEM.BYTE): BOOLEAN;
 VAR yyi	: INTEGER;
 BEGIN
  FOR yyi := 0 TO INTEGER (HIGH (yya)) DO
   IF yya [yyi] # yyb [yyi] THEN RETURN FALSE; END;
  END;
  RETURN TRUE;
 END yyIsEqual;

PROCEDURE MacroMod (t: Tree.tTree);
 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Spec) THEN
(* line 338 "" *)
     WITH t^.Spec DO
(* line 338 "" *)
      
	MacroMod (TreeNames);
;
      RETURN;
     END;

  END;
  IF (t^.Kind = Tree.TreeName) THEN
(* line 341 "" *)
     WITH t^.TreeName DO
(* line 341 "" *)
      
	WriteS (f, "# define begint"); WI (Name); WriteS (f, "(a)	a := NIL;"); WriteNl (f);
	WriteS (f, "# define equalt"); WI (Name); WriteS (f, "(a, b)	"); WI (Name); WriteS (f, ".IsEqual"); WI (Name); WriteS (f, " (a, b)"); WriteNl (f);
	MacroMod (Next);
;
      RETURN;
     END;

  END;
 END MacroMod;

PROCEDURE DefMod (t: Tree.tTree);
 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Spec) THEN
(* line 350 "" *)
     WITH t^.Spec DO
(* line 350 "" *)
      
	WriteS (f, "DEFINITION MODULE "); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "IMPORT SYSTEM, IO"); DefMod (TreeNames); WriteS (f, ";"); WriteNl (f);
	WriteLine (Codes^.Codes.ImportLine);
	WriteText (f, Codes^.Codes.Import);
	WriteLine (Codes^.Codes.ExportLine);
	WriteText (f, Codes^.Codes.Export);
	WriteNl (f);
	WriteS (f, "VAR yyf	: IO.tFile;"); WriteNl (f);
	WriteS (f, "VAR Exit	: PROC;"); WriteNl (f);
	WriteNl (f);
	DefMod (Public);
	WriteNl (f);
	WriteS (f, "PROCEDURE Begin"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
	WriteS (f, "PROCEDURE Close"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "END "); WI (TrafoName); WriteS (f, "."); WriteNl (f);
;
      RETURN;
     END;

  END;
  IF (t^.Kind = Tree.TreeName) THEN
(* line 369 "" *)
     WITH t^.TreeName DO
(* line 369 "" *)
      
	WriteS (f, ", "); WI (Name);
	DefMod (Next);
;
      RETURN;
     END;

  END;
  IF (t^.Kind = Tree.Name) THEN
(* line 373 "" *)
     WITH t^.Name DO
(* line 373 "" *)
      
	IF Object # NoTree THEN
	   ListCount := 0;
	   WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ("); 
	   DefMod (Object^.Routine.InForm);
	   DefMod (Object^.Routine.OutForm);
	   WriteS (f, ")"); 
	   IF Object^.Kind = Tree.Predicate THEN
	      WriteS (f, ": BOOLEAN"); 
	   ELSIF Object^.Kind = Tree.Function THEN
	      WriteS (f, ": "); DefMod (Object^.Function.ReturnForm^.Formal.TypeDesc);
	   END;
	   WriteS (f, ";"); WriteNl (f);
	END;
	DefMod (Next);
;
      RETURN;
     END;

  END;
  IF (t^.Kind = Tree.Formal) THEN
(* line 389 "" *)
     WITH t^.Formal DO
(* line 389 "" *)
      
	IF ListCount > 0 THEN WriteS (f, "; "); END;
	IF Path^.Var.IsOutput THEN WriteS (f, "VAR "); END;
	WI (Name); WriteS (f, ": "); 
	DefMod (TypeDesc);
	INC (ListCount);
	DefMod (Next);
;
      RETURN;
     END;

  END;
  IF (t^.Kind = Tree.NodeTypes) THEN
(* line 397 "" *)
     WITH t^.NodeTypes DO
(* line 397 "" *)
      
	WI (TreeName^.TreeName.Name); WriteS (f, ".t"); WI (TreeName^.TreeName.Name);
;
      RETURN;
     END;

  END;
  IF (t^.Kind = Tree.UserType) THEN
(* line 400 "" *)
     WITH t^.UserType DO
(* line 400 "" *)
      
	WI (Type);
;
      RETURN;
     END;

  END;
 END DefMod;

PROCEDURE ImplMod (t: Tree.tTree);
 VAR yyTempo: RECORD CASE : INTEGER OF
 | 14: yyR14: RECORD
  Var: tTree;
  END;
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Spec:
(* line 407 "" *)
     WITH t^.Spec DO
(* line 407 "" *)
      
	WriteS (f, "IMPLEMENTATION MODULE "); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
      IF NOT IsElement (ORD ('m'), Options) THEN
	WriteS (f, "# define yyInline"); WriteNl (f);
      END;
	WriteS (f, "# ifdef yyInline"); WriteNl (f);
	WriteS (f, "# define yyALLOC(tree, make, ptr, kind) \"); WriteNl (f);
	WriteS (f, "  ptr := tree.yyPoolFreePtr; \"); WriteNl (f);
	WriteS (f, "  IF SYSTEM.ADDRESS (ptr) >= tree.yyPoolMaxPtr THEN ptr := tree.yyAlloc (); END; \"); WriteNl (f);
	WriteS (f, "  INC (tree.yyPoolFreePtr, tree.yyNodeSize [tree.kind]); \"); WriteNl (f);
	WriteS (f, "  ptr^.yyHead.yyMark := 0; \"); WriteNl (f);
	WriteS (f, "  ptr^.Kind := tree.kind;"); WriteNl (f);
	WriteS (f, "# else"); WriteNl (f);
	WriteS (f, "# define yyALLOC(tree, make, ptr, kind) ptr := tree.make (tree.kind);"); WriteNl (f);
	WriteS (f, "# endif"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "# define yyWrite(s) IO.WriteS (yyf, s)"); WriteNl (f);
	WriteS (f, "# define yyWriteNl IO.WriteNl (yyf)"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "IMPORT SYSTEM, System, IO"); DefMod (TreeNames); WriteS (f, ";"); WriteNl (f);
	WriteLine (Codes^.Codes.GlobalLine);
	WriteText (f, Codes^.Codes.Global);
	WriteS (f, '# include "yy'); WI (TrafoName); WriteS (f, '.w"'); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE yyAbort (yyFunction: ARRAY OF CHAR);"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteS (f, "  IO.WriteS (IO.StdError, 'Error: module "); WI (TrafoName); WriteS (f, ", routine ');"); WriteNl (f);
	WriteS (f, "  IO.WriteS (IO.StdError, yyFunction);"); WriteNl (f);
	WriteS (f, "  IO.WriteS (IO.StdError, ' failed');"); WriteNl (f);
	WriteS (f, "  IO.WriteNl (IO.StdError);"); WriteNl (f);
	WriteS (f, "  Exit;"); WriteNl (f);
	WriteS (f, " END yyAbort;"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE yyIsEqual (yya, yyb: ARRAY OF SYSTEM.BYTE): BOOLEAN;"); WriteNl (f);
	WriteS (f, " VAR yyi	: INTEGER;"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteS (f, "  FOR yyi := 0 TO INTEGER (HIGH (yya)) DO"); WriteNl (f);
	WriteS (f, "   IF yya [yyi] # yyb [yyi] THEN RETURN FALSE; END;"); WriteNl (f);
	WriteS (f, "  END;"); WriteNl (f);
	WriteS (f, "  RETURN TRUE;"); WriteNl (f);
	WriteS (f, " END yyIsEqual;"); WriteNl (f);
	WriteNl (f);
	ImplMod (Routines);
	WriteS (f, "PROCEDURE Begin"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteLine (Codes^.Codes.BeginLine);
	WriteText (f, Codes^.Codes.Begin);
	WriteS (f, " END Begin"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE Close"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteLine (Codes^.Codes.CloseLine);
	WriteText (f, Codes^.Codes.Close);
	WriteS (f, " END Close"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "PROCEDURE yyExit;"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
	WriteS (f, "  IO.CloseIO; System.Exit (1);"); WriteNl (f);
	WriteS (f, " END yyExit;"); WriteNl (f);
	WriteNl (f);
	WriteS (f, "BEGIN"); WriteNl (f);
	WriteS (f, " yyf	:= IO.StdOutput;"); WriteNl (f);
	WriteS (f, " Exit	:= yyExit;"); WriteNl (f);
	WriteS (f, " Begin"); WI (TrafoName); WriteS (f, ";"); WriteNl (f);
	WriteS (f, "END "); WI (TrafoName); WriteS (f, "."); WriteNl (f);
;
      RETURN;
     END;

  | Tree.Procedure:
(* line 473 "" *)
     WITH t^.Procedure DO
(* line 473 "" *)
      
	ListCount := 0;
	WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ("); 
	DefMod (InForm);
	DefMod (OutForm);
	WriteS (f, ");"); WriteNl (f);
	WriteLine (LocalLine);
	WriteText (f, Local);
	WriteS (f, " VAR yyTempo: RECORD CASE : INTEGER OF"); WriteNl (f);
	RoutineKind := kProcedure;
	InFormals := InForm;
	OutFormals := OutForm;
	Declare (Rules);
	WriteS (f, " END; END;"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
      IF IsElement (ORD ('n'), Options) THEN
	Tg1 (InForm);
      END;
      IF IsElement (ORD ('b'), Options) THEN
	ImplMod (Rules);
        IF IsElement (ORD ('f'), Options) THEN
	   WriteS (f, "  yyAbort ('"); WI (Name); WriteS (f, "');"); WriteNl (f);
        END;
      ELSE
	TemposDone := FALSE;
	CommonTestElim (Decisions);
        IF IsElement (ORD ('f'), Options) AND NOT NeedsNoFinale (Decisions) THEN
	   WriteS (f, "  yyAbort ('"); WI (Name); WriteS (f, "');"); WriteNl (f);
	END;
      END;
	WriteS (f, " END "); WI (Name); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Function:
(* line 507 "" *)
     WITH t^.Function DO
(* line 507 "" *)
      
	ListCount := 0;
	WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ("); 
	DefMod (InForm);
	DefMod (OutForm);
	WriteS (f, "): "); DefMod (ReturnForm^.Formal.TypeDesc); WriteS (f, ";"); WriteNl (f);
	WriteLine (LocalLine);
	WriteText (f, Local);
	WriteS (f, " VAR yyTempo: RECORD CASE : INTEGER OF"); WriteNl (f);
	RoutineKind := kFunction;
	InFormals := InForm;
	OutFormals := OutForm;
	ReturnFormals := ReturnForm;
	Declare (Rules);
	WriteS (f, " END; END;"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
      IF IsElement (ORD ('b'), Options) THEN
	ImplMod (Rules);
	WriteS (f, "  yyAbort ('"); WI (Name); WriteS (f, "');"); WriteNl (f);
      ELSE
	TemposDone := FALSE;
	CommonTestElim (Decisions);
	IF NOT NeedsNoFinale (Decisions) THEN
	   WriteS (f, "  yyAbort ('"); WI (Name); WriteS (f, "');"); WriteNl (f);
	END;
      END;
	WriteS (f, " END "); WI (Name); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Predicate:
(* line 537 "" *)
     WITH t^.Predicate DO
(* line 537 "" *)
      
	ListCount := 0;
	WriteS (f, "PROCEDURE "); WI (Name); WriteS (f, " ("); 
	DefMod (InForm);
	DefMod (OutForm);
	WriteS (f, "): BOOLEAN;"); WriteNl (f);
	WriteLine (LocalLine);
	WriteText (f, Local);
	WriteS (f, " VAR yyTempo: RECORD CASE : INTEGER OF"); WriteNl (f);
	RoutineKind := kPredicate;
	InFormals := InForm;
	OutFormals := OutForm;
	Declare (Rules);
	WriteS (f, " END; END;"); WriteNl (f);
	WriteS (f, " BEGIN"); WriteNl (f);
      IF IsElement (ORD ('n'), Options) THEN
	Tg1 (InForm);
      END;
      IF IsElement (ORD ('b'), Options) THEN
	ImplMod (Rules);
	WriteS (f, "  RETURN FALSE;"); WriteNl (f);
      ELSE
	TemposDone := FALSE;
	CommonTestElim (Decisions);
	IF NOT NeedsNoFinale (Decisions) THEN
	   WriteS (f, "  RETURN FALSE;"); WriteNl (f);
	END;
      END;
	WriteS (f, " END "); WI (Name); WriteS (f, ";"); WriteNl (f);
	WriteNl (f);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Rule:
(* line 569 "" *)
     WITH t^.Rule DO
(* line 569 "" *)
      
	WriteLine (Line);
	IF HasTempos THEN WriteS (f, "    WITH yyTempo.yyR"); WN (Index); WriteS (f, " DO"); END;
	WriteS (f, "   LOOP"); WriteNl (f);
	Decls := VarDecls;
	Match (Patterns, InFormals);
      IF IsElement (ORD ('w'), Options) AND (Statements^.Kind # Tree.NoStatement) THEN
	Tg2 (Patterns, InFormals);
      END;
	ImplMod (Statements);
	IF NOT HasRejectOrFail THEN
	   AssignFormals (Exprs, OutFormals);
	   MatchExprs (Exprs);
	   CASE RoutineKind OF
	   | kProcedure: WriteS (f, "      RETURN;"); WriteNl (f);

	   | kFunction :
	      AssignTempo (Expr);
	      IF HasPatterns AND (Expr^.Kind # Tree.Compose) AND (t^.Kind # Tree.DontCare1) THEN
		 WriteS (f, "      "); WI (Tempo); WriteS (f, " := "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
		 MatchExpr (Expr);
		 WriteS (f, "      RETURN "); WI (Tempo); WriteS (f, ";"); WriteNl (f);
	      ELSE
		 MatchExpr (Expr);
		 WriteS (f, "      RETURN "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
	      END;

	   | kPredicate: WriteS (f, "      RETURN TRUE;"); WriteNl (f);
	   END;
	END;
      IF IsElement (ORD ('w'), Options) AND (Statements^.Kind # Tree.NoStatement) THEN
	Tg3 (Patterns);
      END;
	WriteS (f, "   END;"); WriteNl (f);
	IF HasTempos THEN WriteS (f, "    END;"); WriteNl (f);
	END;
	WriteNl (f);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.ProcCall:
(* line 608 "" *)
     WITH t^.ProcCall DO
(* line 608 "" *)
      
	WriteLine (Pos);
	AssignTempo (Call);
	WriteS (f, "      "); Expression (Call); WriteS (f, ";"); WriteNl (f);
	MatchExpr (Call);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Condition:
(* line 615 "" *)
     WITH t^.Condition DO
(* line 615 "" *)
      
	WriteLine (Pos);
	AssignTempo (Expr);
	WriteS (f, "      IF NOT ("); Expression (Expr); WriteS (f, ") THEN EXIT; END;"); WriteNl (f);
	MatchExpr (Expr);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Assignment:
(* line 622 "" *)
     WITH t^.Assignment DO
(* line 622 "" *)
      
	WriteLine (Pos);
	AssignTempo (Adr);
	AssignTempo (Expr);
	IF Object # NoTree THEN
	   WriteS (f, "      "); ImplMod (Object^.Formal.Path);
	ELSE
	   WriteS (f, "      "); Expression (Adr);
	END;
	WriteS (f, " := "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
	MatchExpr (Adr);
	MatchExpr (Expr);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Reject:
(* line 636 "" *)
     WITH t^.Reject DO
(* line 636 "" *)
      
	WriteLine (Pos);
	WriteS (f, "      EXIT;"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.Fail:
(* line 640 "" *)
     WITH t^.Fail DO
(* line 640 "" *)
      
	WriteLine (Pos);
	WriteS (f, "      RETURN"); IF RoutineKind = kPredicate THEN WriteS (f, " FALSE"); END; WriteS (f, ";"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.TargetStmt:
(* line 644 "" *)
     WITH t^.TargetStmt DO
(* line 644 "" *)
      
	WriteLine (Pos);
	WriteS (f, "      "); ImplMod (Stmt); WriteS (f, ";"); WriteNl (f);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Nl:
(* line 649 "" *)
     WITH t^.Nl DO
(* line 649 "" *)
      
	WriteLine (Pos);
	WriteS (f, "      yyWriteNl;"); WriteNl (f);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.WriteStr:
(* line 654 "" *)
     WITH t^.WriteStr DO
(* line 654 "" *)
      
	WriteLine (Pos);
	WriteS (f, "      yyWrite ("); WriteString (f, String); WriteS (f, ");"); WriteNl (f);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Ident:
(* line 659 "" *)
    WITH yyTempo.yyR14 DO
     WITH t^.Ident DO
(* line 659 "" *)
      ;
(* line 659 "" *)
      
	Var := IdentifyVar (Decls, Attribute);
	IF Var # NoTree THEN ImplMod (Var^.Formal.Path); ELSE WI (Attribute); END;
	ImplMod (Next);
;
      RETURN;
     END;
    END;

  | Tree.Any:
(* line 664 "" *)
     WITH t^.Any DO
(* line 664 "" *)
      
	WriteString (f, Code);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Anys:
(* line 668 "" *)
     WITH t^.Anys DO
(* line 668 "" *)
      
	ImplMod (Layouts);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.LayoutAny:
(* line 672 "" *)
     WITH t^.LayoutAny DO
(* line 672 "" *)
      
	WriteString (f, Code);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Designator:
(* line 676 "" *)
     WITH t^.Designator DO
(* line 676 "" *)
      
	ImplMod (Object^.Formal.Path); WriteS (f, "^."); WI (Type); WriteS (f, "."); WI (Attribute);
	ImplMod (Next);
;
      RETURN;
     END;

  | Tree.Field:
(* line 680 "" *)
     WITH t^.Field DO
(* line 680 "" *)
      
	ImplMod (Next);
	WriteS (f, "."); WI (Name);
;
      RETURN;
     END;

  | Tree.ConsType:
(* line 684 "" *)
     WITH t^.ConsType DO
(* line 684 "" *)
      
	ImplMod (Next);
	WriteS (f, "^."); WI (Name);
;
      RETURN;
     END;

  | Tree.Var:
(* line 688 "" *)
     WITH t^.Var DO
(* line 688 "" *)
      
	WI (Name);
;
      RETURN;
     END;

  | Tree.NodeTypes:
(* line 691 "" *)
     WITH t^.NodeTypes DO
(* line 691 "" *)
      
	WriteS (f, "t"); WI (TreeName^.TreeName.Name);
;
      RETURN;
     END;

  | Tree.UserType:
(* line 694 "" *)
     WITH t^.UserType DO
(* line 694 "" *)
      
	WI (Type);
;
      RETURN;
     END;

  ELSE END;

 END ImplMod;

PROCEDURE Declare (t: Tree.tTree);
 VAR yyTempo: RECORD CASE : INTEGER OF
 | 2: yyR2: RECORD
  Var: tTree;
  END;
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Formal:
(* line 701 "" *)
     WITH t^.Formal DO
(* line 701 "" *)
      
	WriteS (f, "  "); WI (Name); WriteS (f, ": "); DefMod (TypeDesc); WriteS (f, ";"); WriteNl (f);
	Declare (Next);
;
      RETURN;
     END;

  | Tree.Param:
(* line 705 "" *)
    WITH yyTempo.yyR2 DO
     WITH t^.Param DO
(* line 705 "" *)
      ;
(* line 705 "" *)
      
	Var := IdentifyVar (Decls, Name);
	WriteS (f, "  "); WI (Name); WriteS (f, ": "); DefMod (Var^.Formal.TypeDesc); WriteS (f, ";"); WriteNl (f);
	Declare (Next);
;
      RETURN;
     END;
    END;

  | Tree.Rule:
(* line 710 "" *)
     WITH t^.Rule DO
(* line 710 "" *)
      
	IF HasTempos THEN
	   WriteS (f, " | "); WN (Index); WriteS (f, ": yyR"); WN (Index); WriteS (f, ": RECORD"); WriteNl (f);
	   Decls := VarDecls;
	   Declare (Patterns);
	   Declare (Exprs);
	   IF RoutineKind = kFunction THEN
	      Declare (Expr);
	      IF HasPatterns AND (Expr^.Kind # Tree.Compose) AND (t^.Kind # Tree.DontCare1) THEN
		 WriteS (f, "  "); WI (Tempo); WriteS (f, ": "); DefMod (ReturnFormals^.Formal.TypeDesc); WriteS (f, ";"); WriteNl (f);
	      END;
	   END;
	   Declare (Statements);
	   WriteS (f, "  END;"); WriteNl (f);
	END;
	Declare (Next);
;
      RETURN;
     END;

  | Tree.ProcCall:
(* line 727 "" *)
     WITH t^.ProcCall DO
(* line 727 "" *)
      
	Declare (Call);
	Declare (Next);
;
      RETURN;
     END;

  | Tree.Condition:
(* line 731 "" *)
     WITH t^.Condition DO
(* line 731 "" *)
      
	Declare (Expr);
	Declare (Next);
;
      RETURN;
     END;

  | Tree.Assignment:
(* line 735 "" *)
     WITH t^.Assignment DO
(* line 735 "" *)
      
	Declare (Adr);
	Declare (Expr);
	Declare (Next);
;
      RETURN;
     END;

  | Tree.TargetStmt:
(* line 740 "" *)
     WITH t^.TargetStmt DO
(* line 740 "" *)
      
	Declare (Parameters);
	Declare (Next);
;
      RETURN;
     END;

  | Tree.Statement
  , Tree.Reject
  , Tree.Fail
  , Tree.Nl
  , Tree.WriteStr:
(* line 744 "" *)
     WITH t^.Statement DO
(* line 744 "" *)
      
	Declare (Next);
;
      RETURN;
     END;

  | Tree.OnePattern:
(* line 747 "" *)
     WITH t^.OnePattern DO
(* line 747 "" *)
      
	IF (Pattern^.Pattern.Tempo # NoIdent) AND (Pattern^.Kind # Tree.DontCare1) THEN
	   WriteS (f, "  "); WI (Pattern^.Pattern.Tempo); WriteS (f, ": "); DefMod (Pattern^.Pattern.TypeDesc); WriteS (f, ";"); WriteNl (f);
	END;
	Declare (Pattern);
	Declare (Next);
;
      RETURN;
     END;

  | Tree.OneExpr
  , Tree.NamedExpr:
(* line 754 "" *)
     WITH t^.OneExpr DO
(* line 754 "" *)
      
	Declare (Expr);
	Declare (Next);
;
      RETURN;
     END;

  | Tree.Decompose:
(* line 758 "" *)
     WITH t^.Decompose DO
(* line 758 "" *)
      
	Declare (Patterns);
;
      RETURN;
     END;

  | Tree.DontCare:
(* line 761 "" *)
     WITH t^.DontCare DO
(* line 761 "" *)
      
	Declare (Tempos);
;
      RETURN;
     END;

  | Tree.DontCare1:
(* line 764 "" *)
     WITH t^.DontCare1 DO
(* line 764 "" *)
      
	IF Tempo # NoIdent THEN
	   WriteS (f, "  "); WI (Tempo); WriteS (f, ": "); DefMod (TypeDesc); WriteS (f, ";"); WriteNl (f);
	END;
;
      RETURN;
     END;

  | Tree.Value:
(* line 769 "" *)
     WITH t^.Value DO
(* line 769 "" *)
      
	Declare (Expr);
;
      RETURN;
     END;

  | Tree.Compose:
(* line 772 "" *)
     WITH t^.Compose DO
(* line 772 "" *)
      
	IF Tempo # NoIdent THEN
	   WriteS (f, "  "); WI (Tempo); WriteS (f, ": "); DefMod (TypeDesc); WriteS (f, ";"); WriteNl (f);
	END;
	Declare (Exprs);
;
      RETURN;
     END;

  | Tree.Call:
(* line 778 "" *)
     WITH t^.Call DO
(* line 778 "" *)
      
	Declare (Expr);
	Declare (Exprs);
	Declare (Patterns);
;
      RETURN;
     END;

  | Tree.Binary:
(* line 783 "" *)
     WITH t^.Binary DO
(* line 783 "" *)
      
	Declare (Lop);
	Declare (Rop);
;
      RETURN;
     END;

  | Tree.PreOperator:
(* line 787 "" *)
     WITH t^.PreOperator DO
(* line 789 "" *)
      
	Declare (Expr); 
;
      RETURN;
     END;

  | Tree.PostOperator:
(* line 787 "" *)
     WITH t^.PostOperator DO
(* line 789 "" *)
      
	Declare (Expr); 
;
      RETURN;
     END;

  | Tree.Parents:
(* line 787 "" *)
     WITH t^.Parents DO
(* line 789 "" *)
      
	Declare (Expr); 
;
      RETURN;
     END;

  | Tree.Index:
(* line 792 "" *)
     WITH t^.Index DO
(* line 792 "" *)
      
	Declare (Expr);
	Declare (Exprs);
;
      RETURN;
     END;

  ELSE END;

 END Declare;

PROCEDURE Tg1 (t: Tree.tTree);
 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Formal) THEN
(* line 800 "" *)
     WITH t^.Formal DO
(* line 800 "" *)
      
	TheName := Name;
	Tg1 (TypeDesc);
	Tg1 (Next);
;
      RETURN;
     END;

  END;
  IF (t^.Kind = Tree.NodeTypes) THEN
(* line 805 "" *)
     WITH t^.NodeTypes DO
(* line 805 "" *)
      
	WriteS (f, "  IF "); WI (TheName); WriteS (f, " = "); WI (TreeName^.TreeName.Name); WriteS (f, ".No"); 
	WI (TreeName^.TreeName.Name); WriteS (f, " THEN RETURN"); IF RoutineKind = kPredicate THEN WriteS (f, " FALSE"); END; WriteS (f, "; END;"); WriteNl (f);
;
      RETURN;
     END;

  END;
 END Tg1;

PROCEDURE Tg3 (t: Tree.tTree);
 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.OnePattern) THEN
(* line 813 "" *)
     WITH t^.OnePattern DO
(* line 813 "" *)
      
	Tg3 (Pattern);
	Tg3 (Next);
;
      RETURN;
     END;

  END;
  IF (t^.Kind = Tree.Decompose) THEN
(* line 817 "" *)
     WITH t^.Decompose DO
(* line 817 "" *)
      
	WriteS (f, "     END;"); WriteNl (f);
;
      RETURN;
     END;

  END;
 END Tg3;

PROCEDURE CommonTestElim2 (OneTest: Tree.tTree; yyP1: Tree.tTree);
 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF OneTest = Tree.NoTree THEN RETURN; END;
  IF yyP1 = Tree.NoTree THEN RETURN; END;
  IF (OneTest^.Kind = Tree.TestValue) THEN
(* line 823 "" *)
   LOOP
     WITH OneTest^.TestValue DO
(* line 824 "" *)
      IF NOT ((NeedsMatch (Expr))) THEN EXIT; END;
(* line 825 "" *)
      CommonTestElim (OneTest);
(* line 826 "" *)
      WriteS (f, "    LOOP");
(* line 826 "" *)
      WriteNl (f);
(* line 827 "" *)
      MatchExpr (OneTest ^ . TestValue . Expr);
(* line 828 "" *)
      CommonTestElim (yyP1);
(* line 829 "" *)
      WriteS (f, "    EXIT; END;");
(* line 829 "" *)
      WriteNl (f);
      RETURN;
     END;
   END;

  END;
(* line 831 "" *)
(* line 832 "" *)
      CommonTestElim (OneTest);
(* line 833 "" *)
      CommonTestElim (yyP1);
      RETURN;

 END CommonTestElim2;

PROCEDURE CommonTestElim (t: Tree.tTree);
 VAR yyTempo: RECORD CASE : INTEGER OF
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;

  CASE t^.Kind OF
  | Tree.Decision:
(* line 838 "" *)
     WITH t^.Decision DO
(* line 838 "" *)
      
	IF Cases = 0 THEN
	   IF NOT TemposDone AND (OneTest^.Kind = Tree.TestValue) AND NeedsTempo (Then, rule) THEN
	      WriteS (f, "    WITH yyTempo.yyR"); WN (rule^.Rule.Index); WriteS (f, " DO"); WriteNl (f);
	      TemposDone := TRUE;
	      CommonTestElim2 (OneTest, Then);
	      WriteS (f, "  END;"); WriteNl (f);
	      WriteS (f, "    END;"); WriteNl (f);
	   ELSE
	      GetRule (Then, rule);
	      Decls := rule^.Rule.VarDecls;
	      CommonTestElim2 (OneTest, Then);
	      WriteS (f, "  END;"); WriteNl (f);
	   END;
	   TemposDone := FALSE;
	   CommonTestElim (Else);
	ELSE
	   i := Cases; Case (t);
	END;
;
      RETURN;
     END;

  | Tree.Decided:
(* line 858 "" *)
     WITH t^.Decided DO
(* line 858 "" *)
      
	CommonTestElim (Rule);
	IF Rule^.Rule.HasExit THEN
	   TemposDone := FALSE;
	   CommonTestElim (Else);
	END;
;
      RETURN;
     END;

  | Tree.TestKind:
(* line 865 "" *)
     WITH t^.TestKind DO
(* line 865 "" *)
      
	WriteS (f, "  IF ("); ImplMod (Path); WriteS (f, "^.Kind = "); 
	WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); WriteS (f, "."); WI (Name); WriteS (f, ") THEN"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.TestIsType:
(* line 869 "" *)
     WITH t^.TestIsType DO
(* line 869 "" *)
      
	WriteS (f, "  IF "); WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); WriteS (f, ".IsType ("); ImplMod (Path); WriteS (f, ", "); 
	WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); WriteS (f, "."); WI (Name); WriteS (f, ") THEN"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.TestNil:
(* line 873 "" *)
     WITH t^.TestNil DO
(* line 873 "" *)
      
	WriteS (f, "  IF "); ImplMod (Path); WriteS (f, " = NIL THEN"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.TestNonlin:
(* line 876 "" *)
     WITH t^.TestNonlin DO
(* line 876 "" *)
      
	WriteS (f, "  IF (equal"); ImplMod (TypeDesc); WriteS (f, " ("); ImplMod (Path);
	WriteS (f, ", "); ImplMod (Path2); WriteS (f, ")) THEN"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.TestValue:
(* line 880 "" *)
     WITH t^.TestValue DO
(* line 880 "" *)
      
	AssignTempo (Expr);
	WriteS (f, "  IF (equal"); ImplMod (TypeDesc); WriteS (f, " ("); ImplMod (Path);
	WriteS (f, ", "); Expression (Expr); WriteS (f, ")) THEN"); WriteNl (f);
;
      RETURN;
     END;

  | Tree.Rule:
(* line 885 "" *)
     WITH t^.Rule DO
(* line 885 "" *)
      
	WriteLine (Line);
	IF HasTempos AND NOT TemposDone THEN WriteS (f, "    WITH yyTempo.yyR"); WN (Index); WriteS (f, " DO"); WriteNl (f);
	END;
	IF HasExit THEN WriteS (f, "   LOOP"); WriteNl (f);
	END;
	Decls := VarDecls;
      IF IsElement (ORD ('w'), Options) AND (Statements^.Kind # Tree.NoStatement) THEN
	Tg2 (Patterns, InFormals);
      END;
	ImplMod (Statements);
	IF NOT HasRejectOrFail THEN
	   AssignFormals (Exprs, OutFormals);
	   MatchExprs (Exprs);
	   CASE RoutineKind OF
	   | kProcedure: WriteS (f, "      RETURN;"); WriteNl (f);

	   | kFunction :
	      AssignTempo (Expr);
	      IF HasPatterns AND (Expr^.Kind # Tree.Compose) AND (t^.Kind # Tree.DontCare1) THEN
		 WriteS (f, "      "); WI (Tempo); WriteS (f, " := "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
		 MatchExpr (Expr);
		 WriteS (f, "      RETURN "); WI (Tempo); WriteS (f, ";"); WriteNl (f);
	      ELSE
		 MatchExpr (Expr);
		 WriteS (f, "      RETURN "); Expression (Expr); WriteS (f, ";"); WriteNl (f);
	      END;

	   | kPredicate: WriteS (f, "      RETURN TRUE;"); WriteNl (f);
	   END;
	END;
      IF IsElement (ORD ('w'), Options) AND (Statements^.Kind # Tree.NoStatement) THEN
	Tg3 (Patterns);
      END;
	IF HasExit THEN WriteS (f, "   END;"); WriteNl (f);
	END;
	IF HasTempos AND NOT TemposDone THEN WriteS (f, "    END;"); WriteNl (f);
	END;
	WriteNl (f);
;
      RETURN;
     END;

  ELSE END;

 END CommonTestElim;

PROCEDURE Case (t: Tree.tTree);
 VAR yyTempo: RECORD CASE : INTEGER OF
 | 1: yyR1: RECORD
  n: CARDINAL;
  END;
 END; END;
 BEGIN
  IF t = Tree.NoTree THEN RETURN; END;
  IF (t^.Kind = Tree.Decision) THEN
(* line 929 "" *)
    WITH yyTempo.yyR1 DO
     WITH t^.Decision DO
(* line 929 "" *)
      ;
(* line 929 "" *)
      
	WriteNl (f);
	WriteS (f, "  CASE "); ImplMod (OneTest^.OneTest.Path); WriteS (f, "^.Kind OF"); WriteNl (f);
	n := i;
	WHILE n > 0 DO
	   IF NOT IsEmpty (t^.Decision.OneTest^.TestIsType.TypeDesc^.NodeTypes.Types) THEN
	      Case (t^.Decision.OneTest);
	      CommonTestElim (t^.Decision.Then);
	   END;
	   t := t^.Decision.Else;
	   DEC (n);
	END;
	WriteS (f, "  ELSE END;"); WriteNl (f);
	WriteNl (f);
	CommonTestElim (t);
;
      RETURN;
     END;
    END;

  END;
  IF (t^.Kind = Tree.TestKind) THEN
(* line 945 "" *)
     WITH t^.TestKind DO
(* line 945 "" *)
      
	WriteS (f, "  | "); WI (TypeDesc^.NodeTypes.TreeName^.TreeName.Name); WriteS (f, "."); WI (Name); WriteS (f, ":"); WriteNl (f);
;
      RETURN;
     END;

  END;
  IF (t^.Kind = Tree.TestIsType) THEN
(* line 948 "" *)
     WITH t^.TestIsType DO
(* line 948 "" *)
      
	WITH TypeDesc^.NodeTypes DO
	   TheClass := LookupClass (TreeName^.TreeName.Classes, Minimum (Types));
	   WriteS (f, "  | "); WI (TreeName^.TreeName.Name); WriteS (f, "."); WI (TheClass^.Class.Name);
	   Case (TypeDesc); WriteS (f, ":"); WriteNl (f);
	END;
;
      RETURN;
     END;

  END;
  IF (t^.Kind = Tree.NodeTypes) THEN
(* line 955 "" *)
     WITH t^.NodeTypes DO
(* line 955 "" *)
      
	FOR j := Minimum (Types) + 1 TO Maximum (Types) DO
	   IF IsElement (j, Types) THEN
	      TheClass := LookupClass (TreeName^.TreeName.Classes, j); WriteNl (f);
	      WriteS (f, "  , "); WI (TreeName^.TreeName.Name); WriteS (f, "."); WI (TheClass^.Class.Name);
	   END;
	END;
;
      RETURN;
     END;

  END;
 END Case;

PROCEDURE BeginMod;
 BEGIN
 END BeginMod;

PROCEDURE CloseMod;
 BEGIN
 END CloseMod;

PROCEDURE yyExit;
 BEGIN
  IO.CloseIO; System.Exit (1);
 END yyExit;

BEGIN
 yyf	:= IO.StdOutput;
 Exit	:= yyExit;
 BeginMod;
END Mod.
