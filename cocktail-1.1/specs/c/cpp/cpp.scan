EXPORT	{
# include "Positions.h"

INSERT tScanAttribute
}

GLOBAL {

    /* Copyright (C) 1989,1990 James A. Roskind, All rights reserved. 
    This lexer description was written by James A.  Roskind.  Copying 
    of  this  file, as a whole, is permitted providing this notice is 
    intact  and  applicable   in   all   complete   copies.    Direct 
    translations  as a whole to other lexer generator input languages 
    (or lexical description languages)  is  permitted  provided  that 
    this  notice  is  intact and applicable in all such copies, along 
    with a disclaimer that  the  contents  are  a  translation.   The 
    reproduction  of derived files or text, such as modified versions 
    of this file, or the output of scanner generators, is  permitted, 
    provided   the  resulting  work  includes  the  copyright  notice 
    "Portions Copyright (c) 1989, 1990 James  A.   Roskind".  Derived 
    products  must  also  provide the notice ""Portions Copyright (c) 
    1989, 1990 James A.  Roskind"" in a  manner  appropriate  to  the 
    utility,   and  in  keeping  with  copyright  law  (e.g.:  EITHER 
    displayed when first invoked/executed; OR displayed  continuously 
    on  display terminal; OR via placement in the object code in form 
    readable in a printout, with or near the title of the work, or at 
    the end of the file).  No royalties, licenses or  commissions  of 
    any  kind  are  required  to copy this file, its translations, or 
    derivative products, when the copies are made in compliance  with 
    this  notice.  Persons  or  corporations  that  do make copies in 
    compliance  with  this  notice  may  charge  whatever  price   is 
    agreeable  to  a buyer, for such copies or derivative works. THIS 
    FILE IS PROVIDED ``AS IS'' AND WITHOUT  ANY  EXPRESS  OR  IMPLIED 
    WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES 
    OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

    James A. Roskind
    Independent Consultant
    516 Latania Palm Drive
    Indialantic FL, 32903
    (407)729-4348
    jar@ileaf.com
    or ...!uunet!leafusa!jar

COMMENTS-

My  goal  is  to  see  software  developers adopt my C++ grammar as a 
standard until such time as a better  standard  is  accessible.   The 
only  way  to  get it to become a standard, is to be sure that people 
know that derivations are based on a specific work.   The  intent  of 
releasing  this Flex input file is to facilitate experimentation with 
my C++ grammar. The intent  of  the  copyright  notice  is  to  allow 
arbitrary  commercial and non-commercial use of this file, as long as 
reference is given to my standardization effort.   Without  reference 
to  a specific standard, many alternative grammars would develop.  By 
referring to the standard, the C++ grammar is given publicity,  which 
should  lead  to further use in compatible products and systems.  The 
benefits  of  such  a  standard  to  commercial  products  (browsers, 
beautifiers,  translators,  compilers,  ...) should be obvious to the 
developers, in that other compatible products will  emerge,  and  the 
value  of  all  conforming  products  will rise.  Most developers are 
aware of the value of acquiring  a  fairly  complete  grammar  for  a 
language,  and  the  copyright  notice (and the resulting affiliation 
with my work) should not be too high a price to pay.  By copyrighting 
my work, I have some minor control over what this standard is, and  I 
can  (hopefully)  keep it from degrading without my approval.  I will 
consistently attempt to provide upgraded grammars that are  compliant 
with  the  current  art, and the ANSI C++ Committee recommendation in 
particular.  A  developer  is  never  prevented  from  modifying  the 
grammar or this file to improve it in whatever way is seen fit. There 
is  also  no  restriction on the sale of copies, or derivative works, 
providing the request in the copyright notice are satisfied.

If you are not "copying" my work, but  are  rather  only  abstracting 
some of my work, an acknowledgment with references to such a standard 
would  be  appreciated.  Specifically, agreements with my grammar and 
its resolution of otherwise ambiguous constructs, should be noted.

Simply put:""make whatever use you would like of the grammar and this 
file, but include the ``portions Copyright ...'' as  a  reference  to 
this standard.""
*/

/* This file is a dramatically cut down version  of  the  FLEX  input 
file  used in my ANSI C Preprocessor.  The executable version of my C 
preprocessor is available on many platforms (shareware), but this  is 
the  only source extract that is currently being distributed.  If you 
need  a  full  ANSI  C  preprocessor,   with   extensive   diagnostic 
capabilities  and  customization facilities, please contact me at the 
addresses given above.  Current platforms  include  IBMPC  (DOS/OS2), 
Sun  (SPARC  and  Motorola),  and  IBM R/6000.  ... end of commercial 
announcement.

This file is being distributed to facilitate experimentation and  use 
of my C and C++ grammar.


Comment  removal  must be done during the lexing, as context (such as 
enclosure in string literals) must be observed.   For  this  cut-down 
lexer, we  will assume that comments have been removed (don''t assume 
this if you are writing a compiler or browser!).   The  justification 
for   this   assumption   is   a   view   that   we   are  processing 
post-preprocessed source, and hence comment removal was taken care of 
during that phase. Note that in real life, comments CANNOT always  be 
removed  prior  to  lexing,  as  the  sequence of characters '/*' may 
appear within a string literal, and hence NOT indicate the start of a 
comment.

For each IDENTIFIER like string that  is  found,  there  are  several 
distinct interpretations that can be applied:

1)  The  preprocessor  may  interpret  the string as a "keyword" in a 
directive (eg: "pragma" or "include", "defined").

2) The parser may interpret the string as a keyword. (eg: "int").

3) Both parser and preprocessor may interpret the string as a keyword 
(eg: "if").

Since this file is based on source that actually  lexically  analyses 
text  for both preprocessing and parsing, macro definitions were used 
throughout.  The macro definitions supplied here have been customized 
to a C++ parse only, and all  preprocessor  keywords  are  passed  as 
IDENTIFIER  or  TYPEDEFname.  Also, since there is no symbol table to 
interrogate to decide whether a string is  a  TYPEDEFname,  I  simply 
assume  that  any identifier beginning with an upper case letter is a 
TYPEDEFname.  This hack should  allow  you  to  check  out  how  code 
segments  are  parsed using my grammar.  Unfortunately, if you really 
want to parse major league code, you have to write  a  symbol  table, 
and maintain appropriate scoping information.  :-), sorry...
*/

# include "Errors.h"

INSERT ErrorAttribute

static int isaTYPE (string)
   char * string;
{  
    /*  We  should  really  be  maintaining  a  symbol  table, and be 
      carefully keeping track of what the current scope is (or in the 
      case of "rescoped" stuff, what scope to  look  in).  Since  the 
      grammar  is  not annotated with actions to track transitions to 
      various scopes, and there is no symbol table, we will supply  a 
      hack  to  allow  folks  to test the grammar out.  THIS IS NOT A 
      COMPLETE IMPLEMENTATION!!!! */

    return ('A' <= string[0] && 'Z' >= string[0]);
}
}

DEFAULT	{ MessageI ("illegal character", xxError, Attribute.Position, xxCharacter, TokenPtr); }

DEFINE
   identifier		= {a-zA-Z_}{0-9a-zA-Z_}* .
   exponent_part	= {eE}{\-+}?{0-9}+ .
   fractional_constant	= ({0-9}*"."{0-9}+)|({0-9}+".") .
   floating_constant	= ((fractional_constant exponent_part ?)|({0-9}+ exponent_part)){FfLl}? .
   integer_suffix_opt	= ({uU}?{lL}?)|({lL}{uU}) .
   decimal_constant	= {1-9}{0-9}* integer_suffix_opt .
   octal_constant	= "0"{0-7}* integer_suffix_opt .
   hex_constant		= "0"{xX}{0-9a-fA-F}+ integer_suffix_opt .
   simple_escape	= {abfnrtv'"?\\} .
   octal_escape		= {0-7}[1-3] .
   hex_escape		= "x"{0-9a-fA-F}+ .
   escape_sequence	= \\ ( simple_escape | octal_escape | hex_escape) .
   c_char		= - {'\\\n}| escape_sequence .
   s_char		= - {"\\\n}| escape_sequence .

RULE

INSERT RULES #STD#

/*

c, c++ as well as cpp

#STD# else		: { return 0; }
#STD# if		: { return 0; }

cpp only

#STD# define		: { return 0; }
#STD# defined		: { return 0; }
#STD# elif		: { return 0; }
#STD# endif		: { return 0; }
#STD# error		: { return 0; }
#STD# ifdef		: { return 0; }
#STD# ifndef		: { return 0; }
#STD# include		: { return 0; }
#STD# line		: { return 0; }
#STD# pragma		: { return 0; }
#STD# undef		: { return 0; }
#STD# "#"		: { return 0; }
#STD# "##"		: { return 0; }

c++ only

#STD# class		: { return 0; }
#STD# delete		: { return 0; }
#STD# friend		: { return 0; }
#STD# inline		: { return 0; }
#STD# new		: { return 0; }
#STD# operator		: { return 0; }
#STD# overload		: { return 0; }
#STD# protected		: { return 0; }
#STD# private		: { return 0; }
#STD# public		: { return 0; }
#STD# this		: { return 0; }
#STD# virtual		: { return 0; }
*/

#STD# identifier 	: { char Word [256]; (void) GetWord (Word);
			    if (isaTYPE (Word)) return TYPEDEFname; else return IDENTIFIER; }

#STD# decimal_constant 	: { return INTEGERconstant	; }
#STD# octal_constant 	: { return OCTALconstant	; }
#STD# hex_constant 	: { return HEXconstant		; }
#STD# floating_constant	: { return FLOATINGconstant	; }
#STD# L ? \' c_char + \': { return CHARACTERconstant	; }
#STD# L ? \" s_char * \": { return STRINGliteral	; }

#STD# \f | \r		:- {}
