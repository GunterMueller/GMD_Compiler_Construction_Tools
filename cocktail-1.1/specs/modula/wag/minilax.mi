MODULE minilax;

FROM Memory	IMPORT MemoryUsed;
FROM IO		IMPORT StdOutput, StdError, CloseIO;
FROM Errors	IMPORT StoreMessages, WriteMessages;
FROM Parser	IMPORT Parser, CloseParser;
FROM Tree	IMPORT TreeRoot, HeapUsed;
FROM Semantics	IMPORT BeginSemantics, Eval;
FROM ICode	IMPORT Code;
FROM ICodeInter	IMPORT WriteCode, Interpret, ResolveLabels;
IMPORT IO;

VAR ErrorCount : CARDINAL;

BEGIN
   StoreMessages (TRUE);
   ErrorCount := Parser ();

   IO.WriteS  (StdError, "Memory"); IO.WriteI (StdError, MemoryUsed, 8);
   IO.WriteS  (StdError, "  Tree"); IO.WriteI (StdError, HeapUsed  , 8);
   IO.WriteNl (StdError);

   BeginSemantics;
   Eval (TreeRoot);

   IO.WriteS  (StdError, "Memory"); IO.WriteI (StdError, MemoryUsed, 8);
   IO.WriteS  (StdError, "  Tree"); IO.WriteI (StdError, HeapUsed  , 8);
   IO.WriteNl (StdError);

   IF ErrorCount = 0 THEN
      Code (TreeRoot);
      ResolveLabels;
(*    WriteCode; *)
      Interpret;
   END;
   WriteMessages (StdError);
   CloseIO;
END minilax.
