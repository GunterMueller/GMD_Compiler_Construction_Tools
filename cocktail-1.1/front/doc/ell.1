.TH ELL 1 "" GMD
.SH NAME
ell \- recursive descent parser generator
.SH SYNOPSIS
ell [-options] [file]
.SH DESCRIPTION
The parser generator \fIEll\fP processes LL(1) grammars which may contain EBNF
constructs and semantic actions. It generates recursive descent parsers.
A mechanism for L-attribution (inherited and synthesized attributes
evaluable during one preorder traversal) is provided. Syntax
errors are handled fully automatic including error reporting from a prototype
error module, error recovery, and error repair.
.PP
The grammar is either read from the file given as argument or from
standard input. The output is written to the files
Parser.md and Parser.mi (Modula-2) or Parser.h and Parser.c (C). 
Errors detected during the analysis of the grammar are reported on standard error.
.PP
The generated parser needs a few additional modules:
.br
First, a scanner (Scanner.md/Scanner.c, Scanner.mi/Scanner.h) containing
the function GetToken () and the global variable Attribute.
A very primitive Scanner can be requested with the option -s.
.br
Second, a main program.
Option -p will provide a simple parser driver (ParsDrv.mi/ParsDrv.c).
.br
Third, an error handling module called Errors has to provide the
procedures ErrorMessage and ErrorMessageI. A prototype
error handler can be requested with the option -e .
.SH OPTIONS
.IP c
generate C code
.IP d
generate definition part
.IP e
generate prototype error handler
.IP h
provide help information
.IP i
generate implementation part
.IP m
generate Modula-2 code (default)
.IP p
generate parser driver
.IP s
generate (simple) scanner
.SH FILES
.nf
.ta 1.5i
if output is in Modula-2:
.sp 0.5
Parser.md	definition file of the produced parser
Parser.mi	implementation file of the produced parser
ParsDrv.mi	implementation file of simple parser driver
Errors.md	definition file of simple error handler 
Errors.mi	implementation file of simple error handler
Scanner.md	definition file of simple scanner 
Scanner.mi	implementation file of simple scanner
Pars.Tab	Contains sets, to be read when parsing starts
.sp 0.5
if output is in C:
.sp 0.5
Parser.h	specification of the produced parser
Parser.c	body of the produced parser
ParsDrv.mi	implementation file of simple parser driver
Errors.h	body simple error handler
Errors.c	implementation file of simple error handler
Scanner.h	body simple scanner
Scanner.c	implementation file of simple scanner
.fi
.SH SEE\ ALSO
B. Vielsack: "The Parser Generators Lalr and Ell",
GMD Forschungsstelle an der Universitaet Karlsruhe,
Compiler Generation Report No. 8, 1988
.sp 0.5
J. Grosch: "Efficient and Comfortable Error Recovery in Recursive Descent Parsers",
Structured Programming, 11, 129-140 (1990)
