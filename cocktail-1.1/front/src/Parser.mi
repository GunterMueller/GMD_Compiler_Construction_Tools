(* $Id: Parser.mi,v 2.6 1992/08/18 09:46:20 grosch rel $ *)

IMPLEMENTATION MODULE Parser;

IMPORT SYSTEM, Scanner, Positions, Errors, Strings, DynArray, Sets, System;

(* line 2 "/tmp/lalr3300" *)
(* line 26 input.lalr *)

FROM Actions	IMPORT PutAction, PutComment, tActionMode, ScannerName, ParserName;
FROM Errors	IMPORT eError, eInteger, ErrorMessageI;
FROM Lists	IMPORT Append, IsEmpty, Head, Tail, MakeList, tList;
FROM Oper	IMPORT OperKind, MakePriority, CompletePriority, MakeOperator, MakeOperHeader;
FROM Scanner	IMPORT GetToken, tScanAttribute, Attribute, ErrorAttribute;
FROM Positions	IMPORT NoPosition;
FROM Strings	IMPORT AssignEmpty, tString, ArrayToString;
FROM StringMem	IMPORT PutString, tStringRef;
FROM Idents	IMPORT NoIdent, MakeIdent;
FROM SYSTEM	IMPORT ADR, ADDRESS;
FROM TokenTab	IMPORT Terminal;
FROM Tokens	IMPORT MakeGlobalHeader, MakeTokensHeader, MakeDeclaration, CompleteDeclarations;
FROM Rules	IMPORT MakeRulesHeader, MakeLeafNode, MakeActionNode, MakeUnaryNode,
			MakeBracketNode, MakeBinaryNode, MakePrioAlternativeNode,
			MakeRule, Operation, NoExpression;

CONST
  cEol = 12C;	(* eol character *)
  eNumToBig = 9;

TYPE tParsAttribute = RECORD Scan: tScanAttribute; END;

VAR
  String		,
  EndOfLineString	: tString;
  EndOfLine		: ADDRESS;


CONST
   yyInitStackSize	= 100;
   yyNoState		= 0;

   yyFirstTerminal		= 0;
   yyLastTerminal		= 30;
   yyFirstSymbol		= 0;
   yyLastSymbol		= 62;
   yyTableMax		= 222;
   yyNTableMax		= 131;
   yyFirstReadState		= 1;
   yyLastReadState		= 62;
   yyFirstReadTermState		= 63;
   yyLastReadTermState		= 78;
   yyLastReadNontermState		= 96;
   yyFirstReduceState		= 97;
   yyLastReduceState		= 159;
   yyStartState		= 1;
   yyStopState		= 97;

   yyFirstFinalState	= yyFirstReadTermState;
   yyLastState		= yyLastReduceState;

TYPE
   yyTableElmt		= SHORTCARD;
   yyTCombRange		= yyTableElmt [0 .. yyTableMax];
   yyNCombRange		= yyTableElmt [yyLastTerminal + 1 .. yyNTableMax];
   yyStateRange		= yyTableElmt [0 .. yyLastState];
   yyReadRange		= yyTableElmt [yyFirstReadState .. yyLastReadState];
   yyReadReduceRange	= yyTableElmt [yyFirstReadTermState ..yyLastReadNontermState];
   yyReduceRange	= yyTableElmt [yyFirstReduceState .. yyLastReduceState];
   yySymbolRange	= yyTableElmt [yyFirstSymbol .. yyLastSymbol];
   yyTCombType		= RECORD Check, Next: yyStateRange; END;
   yyNCombType		= yyStateRange;
   yyTCombTypePtr	= POINTER TO yyTCombType;
   yyNCombTypePtr	= POINTER TO yyNCombType;
   yyStackType		= POINTER TO ARRAY [0 .. 1000000] OF yyStateRange;

VAR
   yyTBasePtr		: ARRAY [0 .. yyLastReadState]	OF yyTCombTypePtr;
   yyNBasePtr		: ARRAY [0 .. yyLastReadState]	OF yyNCombTypePtr;
   yyDefault		: ARRAY [0 .. yyLastReadState]	OF yyReadRange	;
   yyTComb		: ARRAY yyTCombRange		OF yyTCombType	;
   yyNComb		: ARRAY yyNCombRange		OF yyNCombType	;
   yyLength		: ARRAY yyReduceRange		OF yyTableElmt	;
   yyLeftHandSide	: ARRAY yyReduceRange		OF yySymbolRange;
   yyContinuation	: ARRAY [0 .. yyLastReadState]	OF yySymbolRange;
   yyFinalToProd	: ARRAY yyReadReduceRange	OF yyReduceRange;
   yyIsInitialized	: BOOLEAN;
   yyTableFile		: System.tFile;

PROCEDURE TokenName (Token: CARDINAL; VAR Name: ARRAY OF CHAR);
   PROCEDURE Copy (Source: ARRAY OF CHAR; VAR Target: ARRAY OF CHAR);
      VAR i, j: CARDINAL;
      BEGIN
	 IF HIGH (Source) < HIGH (Target)
	 THEN j := HIGH (Source); ELSE j := HIGH (Target); END;
	 FOR i := 0 TO j DO Target [i] := Source [i]; END;
	 IF HIGH (Target) > j THEN Target [j + 1] := CHR (0); END;
      END Copy;
   BEGIN
      CASE Token OF
      | 0: Copy ("_EndOfFile", Name);
      | 1: Copy ('=', Name);
      | 2: Copy (':', Name);
      | 3: Copy ('.', Name);
      | 4: Copy ('|', Name);
      | 5: Copy ('*', Name);
      | 6: Copy ('+', Name);
      | 7: Copy ('||', Name);
      | 8: Copy ('(', Name);
      | 9: Copy (')', Name);
      | 10: Copy ('[', Name);
      | 11: Copy (']', Name);
      | 12: Copy ('EXPORT', Name);
      | 13: Copy ('GLOBAL', Name);
      | 14: Copy ('LOCAL', Name);
      | 15: Copy ('BEGIN', Name);
      | 16: Copy ('CLOSE', Name);
      | 17: Copy ('TOKEN', Name);
      | 18: Copy ('OPER', Name);
      | 19: Copy ('NONE', Name);
      | 20: Copy ('LEFT', Name);
      | 21: Copy ('RIGHT', Name);
      | 22: Copy ('RULE', Name);
      | 23: Copy ('PREC', Name);
      | 24: Copy ("Comment", Name);
      | 25: Copy ("Number", Name);
      | 26: Copy ("Action", Name);
      | 27: Copy ("Identifier", Name);
      | 28: Copy ("String", Name);
      | 29: Copy ('SCANNER', Name);
      | 30: Copy ('PARSER', Name);
      END;
   END TokenName;

PROCEDURE Parser (): CARDINAL;
(* line 33 "/tmp/lalr3300" *)
(* line 61 input.lalr *)
 VAR ActionMode : tActionMode; 
   VAR
      yyState		: yyStateRange;
      yyTerminal	: yySymbolRange;
      yyNonterminal	: yySymbolRange;	(* left-hand side symbol *)
      yyStackPtr	: yyTableElmt;
      yyStateStackSize	: LONGINT;
      yyAttrStackSize	: LONGINT;
      yyShortStackSize	: yyTableElmt;
      yyStateStack	: yyStackType;
      yyAttributeStack	: POINTER TO ARRAY [0 .. 1000000] OF tParsAttribute;
      yySynAttribute	: tParsAttribute;	(* synthesized attribute *)
      yyRepairAttribute : Scanner.tScanAttribute;
      yyRepairToken	: yySymbolRange;
      yyTCombPtr	: yyTCombTypePtr;
      yyNCombPtr	: yyNCombTypePtr;
      yyIsRepairing	: BOOLEAN;
      yyErrorCount	: CARDINAL;
      yyTokenString	: ARRAY [0..127] OF CHAR;
   BEGIN
      BeginParser;
      yyState		:= yyStartState;
      yyTerminal	:= Scanner.GetToken ();
      yyStateStackSize	:= yyInitStackSize;
      yyAttrStackSize	:= yyInitStackSize;
      DynArray.MakeArray (yyStateStack, yyStateStackSize, SYSTEM.TSIZE (yyStateRange));
      DynArray.MakeArray (yyAttributeStack, yyAttrStackSize, SYSTEM.TSIZE (tParsAttribute));
      yyShortStackSize	:= yyStateStackSize - 1;
      yyStackPtr	:= 0;
      yyErrorCount	:= 0;
      yyIsRepairing	:= FALSE;

      LOOP
	 IF yyStackPtr >= yyShortStackSize THEN
	    DynArray.ExtendArray (yyStateStack, yyStateStackSize, SYSTEM.TSIZE (yyStateRange));
	    DynArray.ExtendArray (yyAttributeStack, yyAttrStackSize, SYSTEM.TSIZE (tParsAttribute));
	    yyShortStackSize := yyStateStackSize - 1;
	 END;
	 yyStateStack^ [yyStackPtr] := yyState;

	 LOOP	(* SPEC State := Next (State, Terminal); terminal transition *)
	    yyTCombPtr := yyTCombTypePtr (LONGCARD (yyTBasePtr [yyState]) 
			     + yyTerminal * SYSTEM.TSIZE (yyTCombType));
	    IF yyTCombPtr^.Check = yyState THEN
	       yyState := yyTCombPtr^.Next;
	       EXIT;
	    END;
	    yyState := yyDefault [yyState];

	    IF yyState = yyNoState THEN			(* syntax error *)
	       yyState := yyStateStack^ [yyStackPtr];
	       IF yyIsRepairing THEN			(* repair *)
		  yyRepairToken := yyContinuation [yyState];
		  yyState := Next (yyState, yyRepairToken);
		  IF yyState <= yyLastReadTermState THEN (* read or read terminal reduce ? *)
		     Scanner.ErrorAttribute (yyRepairToken, yyRepairAttribute);
		     TokenName (yyRepairToken, yyTokenString);
		     Errors.ErrorMessageI (Errors.TokenInserted, Errors.Repair,
			Scanner.Attribute.Position, Errors.Array, SYSTEM.ADR (yyTokenString));
		     IF yyState >= yyFirstFinalState THEN (* avoid second push *)
			yyState := yyFinalToProd [yyState];
		     END;
		     INC (yyStackPtr);
		     yyAttributeStack^ [yyStackPtr].Scan := yyRepairAttribute;
		     yyStateStack^     [yyStackPtr] := yyState;
		  END;
		  IF yyState >= yyFirstFinalState THEN	(* final state ? *)
		    EXIT;
		  END;
	       ELSE					(* report and recover *)
		  INC (yyErrorCount);
		  ErrorRecovery (yyTerminal, yyStateStack, yyStateStackSize, yyStackPtr);
		  yyIsRepairing := TRUE;
	       END;
	    END;
	 END;

	 IF yyState >= yyFirstFinalState THEN		(* final state ? *)
	    IF yyState <= yyLastReadTermState THEN	(* read terminal reduce ? *)
	       INC (yyStackPtr);
	       yyAttributeStack^ [yyStackPtr].Scan := Scanner.Attribute;
	       yyTerminal := Scanner.GetToken ();
	       yyIsRepairing := FALSE;
	    END;

	    LOOP					(* reduce *)
CASE yyState OF
  | 97: (* _0000_ : Grammar _EndOfFile .*)
  DynArray.ReleaseArray (yyStateStack, yyStateStackSize, SYSTEM.TSIZE (yyTableElmt));
  DynArray.ReleaseArray (yyAttributeStack, yyAttrStackSize, SYSTEM.TSIZE (tParsAttribute));
  RETURN yyErrorCount;

  | 98,96: (* Grammar : CommentPart ScannerName ParserName Decl Tokens Oper Rules .*)
  DEC (yyStackPtr, 7); yyNonterminal := 38;
(* line 79 "/tmp/lalr3300" *)
  (* line 98 input.lalr *)
  
  MakeGlobalHeader (yyAttributeStack^[yyStackPtr+1].Scan.Comm, yyAttributeStack^[yyStackPtr+1].Scan.Position);
  
  | 99: (* ScannerName : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 32;
(* line 86 "/tmp/lalr3300" *)
  (* line 103 input.lalr *)
  
  ScannerName := NoIdent;
  
  | 100: (* ScannerName : 'SCANNER' .*)
  DEC (yyStackPtr, 1); yyNonterminal := 32;
(* line 94 "/tmp/lalr3300" *)
  (* line 108 input.lalr *)
  
  ArrayToString ("Scanner", String); ScannerName := MakeIdent (String);
  
  | 101,64: (* ScannerName : 'SCANNER' Identifier .*)
  DEC (yyStackPtr, 2); yyNonterminal := 32;
(* line 98 "/tmp/lalr3300" *)
  (* line 111 input.lalr *)
  
  ScannerName := yyAttributeStack^[yyStackPtr+2].Scan.Sym;
  
  | 102: (* ParserName : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 33;
(* line 105 "/tmp/lalr3300" *)
  (* line 116 input.lalr *)
  
  ParserName := NoIdent;
  
  | 103: (* ParserName : 'PARSER' .*)
  DEC (yyStackPtr, 1); yyNonterminal := 33;
(* line 113 "/tmp/lalr3300" *)
  (* line 121 input.lalr *)
  
  ArrayToString ("Parser", String); ParserName  := MakeIdent (String);
  
  | 104,65: (* ParserName : 'PARSER' Identifier .*)
  DEC (yyStackPtr, 2); yyNonterminal := 33;
(* line 117 "/tmp/lalr3300" *)
  (* line 124 input.lalr *)
  
  ParserName := yyAttributeStack^[yyStackPtr+2].Scan.Sym;
  
  | 105,79: (* Decl : Decl 'EXPORT' Decl_1 CommentPart Actions .*)
  DEC (yyStackPtr, 5); yyNonterminal := 34;
(* line 124 "/tmp/lalr3300" *)
  (* line 129 input.lalr *)
  
  PutComment(Export, yyAttributeStack^[yyStackPtr+2].Scan.Position, yyAttributeStack^[yyStackPtr+4].Scan.Comm, yyAttributeStack^[yyStackPtr+4].Scan.Position);
  
  | 106,80: (* Decl : Decl 'GLOBAL' Decl_2 CommentPart Actions .*)
  DEC (yyStackPtr, 5); yyNonterminal := 34;
(* line 130 "/tmp/lalr3300" *)
  (* line 133 input.lalr *)
  
  PutComment(Global, yyAttributeStack^[yyStackPtr+2].Scan.Position, yyAttributeStack^[yyStackPtr+4].Scan.Comm, yyAttributeStack^[yyStackPtr+4].Scan.Position);
  
  | 107,81: (* Decl : Decl 'LOCAL' Decl_3 CommentPart Actions .*)
  DEC (yyStackPtr, 5); yyNonterminal := 34;
(* line 136 "/tmp/lalr3300" *)
  (* line 137 input.lalr *)
  
  PutComment(Local, yyAttributeStack^[yyStackPtr+2].Scan.Position, yyAttributeStack^[yyStackPtr+4].Scan.Comm, yyAttributeStack^[yyStackPtr+4].Scan.Position);
  
  | 108,82: (* Decl : Decl 'BEGIN' Decl_4 CommentPart Actions .*)
  DEC (yyStackPtr, 5); yyNonterminal := 34;
(* line 142 "/tmp/lalr3300" *)
  (* line 141 input.lalr *)
  
  PutComment(Begin, yyAttributeStack^[yyStackPtr+2].Scan.Position, yyAttributeStack^[yyStackPtr+4].Scan.Comm, yyAttributeStack^[yyStackPtr+4].Scan.Position);
  
  | 109,83: (* Decl : Decl 'CLOSE' Decl_5 CommentPart Actions .*)
  DEC (yyStackPtr, 5); yyNonterminal := 34;
(* line 148 "/tmp/lalr3300" *)
  (* line 145 input.lalr *)
  
  PutComment(Close, yyAttributeStack^[yyStackPtr+2].Scan.Position, yyAttributeStack^[yyStackPtr+4].Scan.Comm, yyAttributeStack^[yyStackPtr+4].Scan.Position);
  
  | 110: (* Decl : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 34;

  | 111: (* Decl_5 : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 44;
(* line 154 "/tmp/lalr3300" *)
  (* line 144 input.lalr *)
  ActionMode := Close;
  | 112: (* Decl_4 : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 43;
(* line 156 "/tmp/lalr3300" *)
  (* line 140 input.lalr *)
  ActionMode := Begin;
  | 113: (* Decl_3 : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 42;
(* line 158 "/tmp/lalr3300" *)
  (* line 136 input.lalr *)
  ActionMode := Local;
  | 114: (* Decl_2 : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 41;
(* line 160 "/tmp/lalr3300" *)
  (* line 132 input.lalr *)
  ActionMode := Global;
  | 115: (* Decl_1 : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 39;
(* line 162 "/tmp/lalr3300" *)
  (* line 128 input.lalr *)
  ActionMode := Export;
  | 116: (* Actions : Action CommentPart .*)
  DEC (yyStackPtr, 2); yyNonterminal := 40;
(* line 166 "/tmp/lalr3300" *)
  (* line 151 input.lalr *)
  
  PutAction (ActionMode, yyAttributeStack^[yyStackPtr+1].Scan.Act, yyAttributeStack^[yyStackPtr+1].Scan.Position, yyAttributeStack^[yyStackPtr+2].Scan.Comm, yyAttributeStack^[yyStackPtr+2].Scan.Position);
  
  | 117: (* Actions : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 40;

  | 118: (* Tokens : 'TOKEN' CommentPart Declarations .*)
  DEC (yyStackPtr, 3); yyNonterminal := 35;
(* line 174 "/tmp/lalr3300" *)
  (* line 157 input.lalr *)
  
  CompleteDeclarations;
  MakeTokensHeader( yyAttributeStack^[yyStackPtr+1].Scan.Position, yyAttributeStack^[yyStackPtr+2].Scan.Comm, yyAttributeStack^[yyStackPtr+2].Scan.Position);
  
  | 119,84: (* Declarations : Declarations Declaration .*)
  DEC (yyStackPtr, 2); yyNonterminal := 45;

  | 120,85: (* Declarations : Declaration .*)
  DEC (yyStackPtr, 1); yyNonterminal := 45;

  | 121: (* Declaration : Terminal Coding CommentPart .*)
  DEC (yyStackPtr, 3); yyNonterminal := 46;
(* line 185 "/tmp/lalr3300" *)
  (* line 166 input.lalr *)
  
  MakeDeclaration( yyAttributeStack^[yyStackPtr+1].Scan.Sym, yyAttributeStack^[yyStackPtr+1].Scan.Position, yyAttributeStack^[yyStackPtr+2].Scan.HasCoding, yyAttributeStack^[yyStackPtr+2].Scan.Position,
                   yyAttributeStack^[yyStackPtr+2].Scan.CodValue, yyAttributeStack^[yyStackPtr+2].Scan.CodNumbPos, yyAttributeStack^[yyStackPtr+3].Scan.Comm, yyAttributeStack^[yyStackPtr+3].Scan.Position);
  
  | 122,68: (* Coding : '=' Number .*)
  DEC (yyStackPtr, 2); yyNonterminal := 48;
(* line 193 "/tmp/lalr3300" *)
  (* line 172 input.lalr *)
  
  yySynAttribute.Scan.Mode := Scanner.Coding;
  IF (yyAttributeStack^[yyStackPtr+2].Scan.Value > MAX(Terminal)) THEN
    ErrorMessageI (eNumToBig, eError, yyAttributeStack^[yyStackPtr+2].Scan.Position, eInteger, ADR (yyAttributeStack^[yyStackPtr+2].Scan.Value));
    yySynAttribute.Scan.HasCoding	:= FALSE;
    yySynAttribute.Scan.CodValue	:= 0; (* Dummywert *)
    yySynAttribute.Scan.CodNumbPos	:= NoPosition;
  ELSE
    yySynAttribute.Scan.HasCoding	:= TRUE;
    yySynAttribute.Scan.CodValue	:= yyAttributeStack^[yyStackPtr+2].Scan.Value;
    yySynAttribute.Scan.CodNumbPos	:= yyAttributeStack^[yyStackPtr+2].Scan.Position;
  END;
  
  | 123: (* Coding : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 48;
(* line 209 "/tmp/lalr3300" *)
  (* line 186 input.lalr *)
  
  yySynAttribute.Scan.Mode		:= Scanner.Coding;
  yySynAttribute.Scan.HasCoding	:= FALSE;
  yySynAttribute.Scan.CodValue	:= 0; (* Dummywert *)
  yySynAttribute.Scan.CodNumbPos	:= NoPosition;
  
  | 124,86: (* Oper : 'OPER' CommentPart Priorities .*)
  DEC (yyStackPtr, 3); yyNonterminal := 36;
(* line 219 "/tmp/lalr3300" *)
  (* line 194 input.lalr *)
  
  MakeOperHeader(yyAttributeStack^[yyStackPtr+1].Scan.Position, yyAttributeStack^[yyStackPtr+2].Scan.Comm, yyAttributeStack^[yyStackPtr+2].Scan.Position);
  
  | 125: (* Oper : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 36;

  | 126,87: (* Priorities : Priority Priorities .*)
  DEC (yyStackPtr, 2); yyNonterminal := 49;

  | 127: (* Priorities : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 49;

  | 128: (* Priority : Associativity Operators CommentPart .*)
  DEC (yyStackPtr, 3); yyNonterminal := 50;
(* line 230 "/tmp/lalr3300" *)
  (* line 203 input.lalr *)
  
  CompletePriority(yyAttributeStack^[yyStackPtr+3].Scan.Comm, yyAttributeStack^[yyStackPtr+3].Scan.Position);
  
  | 129,70: (* Associativity : 'LEFT' .*)
  DEC (yyStackPtr, 1); yyNonterminal := 51;
(* line 236 "/tmp/lalr3300" *)
  (* line 207 input.lalr *)
  MakePriority(Left, yyAttributeStack^[yyStackPtr+1].Scan.Position);
  | 130,71: (* Associativity : 'RIGHT' .*)
  DEC (yyStackPtr, 1); yyNonterminal := 51;
(* line 238 "/tmp/lalr3300" *)
  (* line 208 input.lalr *)
  MakePriority(Right, yyAttributeStack^[yyStackPtr+1].Scan.Position);
  | 131,69: (* Associativity : 'NONE' .*)
  DEC (yyStackPtr, 1); yyNonterminal := 51;
(* line 240 "/tmp/lalr3300" *)
  (* line 209 input.lalr *)
  MakePriority(None, yyAttributeStack^[yyStackPtr+1].Scan.Position);
  | 132,89: (* Operators : Operator Operators .*)
  DEC (yyStackPtr, 2); yyNonterminal := 52;

  | 133: (* Operators : Operator .*)
  DEC (yyStackPtr, 1); yyNonterminal := 52;

  | 134,88: (* Operator : Terminal .*)
  DEC (yyStackPtr, 1); yyNonterminal := 53;
(* line 247 "/tmp/lalr3300" *)
  (* line 215 input.lalr *)
  
  MakeOperator(yyAttributeStack^[yyStackPtr+1].Scan.Sym, yyAttributeStack^[yyStackPtr+1].Scan.Position);
  
  | 135,66: (* Terminal : Identifier .*)
  DEC (yyStackPtr, 1); yyNonterminal := 47;
(* line 254 "/tmp/lalr3300" *)
  (* line 220 input.lalr *)
  
  yySynAttribute.Scan.Mode		:= Scanner.Symbol;
  yySynAttribute.Scan.Sym		:= yyAttributeStack^[yyStackPtr+1].Scan.Sym;
  yySynAttribute.Scan.Position	:= yyAttributeStack^[yyStackPtr+1].Scan.Position;
  
  | 136,67: (* Terminal : String .*)
  DEC (yyStackPtr, 1); yyNonterminal := 47;
(* line 262 "/tmp/lalr3300" *)
  (* line 226 input.lalr *)
  
  yySynAttribute.Scan.Mode		:= Scanner.Symbol;
  yySynAttribute.Scan.Sym		:= yyAttributeStack^[yyStackPtr+1].Scan.Sym;
  yySynAttribute.Scan.Position	:= yyAttributeStack^[yyStackPtr+1].Scan.Position;
  
  | 137: (* Rules : 'RULE' CommentPart Rules_1 .*)
  DEC (yyStackPtr, 3); yyNonterminal := 37;
(* line 271 "/tmp/lalr3300" *)
  (* line 233 input.lalr *)
  
  MakeRulesHeader(yyAttributeStack^[yyStackPtr+1].Scan.Position, yyAttributeStack^[yyStackPtr+2].Scan.Comm, yyAttributeStack^[yyStackPtr+2].Scan.Position);
  
  | 138: (* Rules_1 : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 54;

  | 139,95: (* Rules_1 : Rules_1 Rule .*)
  DEC (yyStackPtr, 2); yyNonterminal := 54;

  | 140: (* Rule : Identifier ':' RightSide '.' CommentPart .*)
  DEC (yyStackPtr, 5); yyNonterminal := 55;
(* line 280 "/tmp/lalr3300" *)
  (* line 238 input.lalr *)
  
  MakeRule(yyAttributeStack^[yyStackPtr+1].Scan.Sym,
           yyAttributeStack^[yyStackPtr+1].Scan.Position,
           yyAttributeStack^[yyStackPtr+2].Scan.Position,
           yyAttributeStack^[yyStackPtr+3].Scan.Expr,
           yyAttributeStack^[yyStackPtr+5].Scan.Comm,
           yyAttributeStack^[yyStackPtr+5].Scan.Position,
           yyAttributeStack^[yyStackPtr+4].Scan.Position,
           yyAttributeStack^[yyStackPtr+3].Scan.HasPrio,   (* Prioritaet der letzten Alternative *)
           yyAttributeStack^[yyStackPtr+3].Scan.Position,
           yyAttributeStack^[yyStackPtr+3].Scan.PriSym,
           yyAttributeStack^[yyStackPtr+3].Scan.PriSymPos);
  
  | 141,93: (* PrioPart : 'PREC' Terminal .*)
  DEC (yyStackPtr, 2); yyNonterminal := 57;
(* line 297 "/tmp/lalr3300" *)
  (* line 253 input.lalr *)
  
  yySynAttribute.Scan.Mode		:= Scanner.PrioPart;
  yySynAttribute.Scan.HasPrio		:= TRUE;
  yySynAttribute.Scan.Position	:= yyAttributeStack^[yyStackPtr+1].Scan.Position;
  yySynAttribute.Scan.PriSym		:= yyAttributeStack^[yyStackPtr+2].Scan.Sym;
  yySynAttribute.Scan.PriSymPos	:= yyAttributeStack^[yyStackPtr+2].Scan.Position;
  
  | 142: (* PrioPart : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 57;
(* line 307 "/tmp/lalr3300" *)
  (* line 261 input.lalr *)
  
  yySynAttribute.Scan.Mode		:= Scanner.PrioPart;
  yySynAttribute.Scan.HasPrio		:= FALSE;
  yySynAttribute.Scan.PriSymPos	:= NoPosition;
  yySynAttribute.Scan.PriSym		:= 0;
  
  | 143,94: (* RightSide : Expressions PrioPart '|' RightSide .*)
  DEC (yyStackPtr, 4); yyNonterminal := 56;
(* line 317 "/tmp/lalr3300" *)
  (* line 269 input.lalr *)
  
  yySynAttribute.Scan		:= yyAttributeStack^[yyStackPtr+4].Scan;  (* PrioPart an Rule zurueckgeben *)
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:=
  MakePrioAlternativeNode (yyAttributeStack^[yyStackPtr+3].Scan.Position,
                           yyAttributeStack^[yyStackPtr+1].Scan.Expr,
                           yyAttributeStack^[yyStackPtr+4].Scan.Expr,
                           yyAttributeStack^[yyStackPtr+2].Scan.HasPrio,
                           yyAttributeStack^[yyStackPtr+2].Scan.Position,
                           yyAttributeStack^[yyStackPtr+2].Scan.PriSym,
                           yyAttributeStack^[yyStackPtr+2].Scan.PriSymPos);
  
  | 144: (* RightSide : Expressions PrioPart .*)
  DEC (yyStackPtr, 2); yyNonterminal := 56;
(* line 332 "/tmp/lalr3300" *)
  (* line 282 input.lalr *)
  
  yySynAttribute.Scan		:= yyAttributeStack^[yyStackPtr+2].Scan;  (* Priopart an Rule zurueckgeben *)
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  IF yyAttributeStack^[yyStackPtr+1].Scan.Mode = Scanner.Empty THEN
    yySynAttribute.Scan.Expr	:= NoExpression;
  ELSE
    yySynAttribute.Scan.Expr	:= yyAttributeStack^[yyStackPtr+1].Scan.Expr;
  END;
  
  | 145,90: (* Expressions : Expression Expressions .*)
  DEC (yyStackPtr, 2); yyNonterminal := 58;
(* line 345 "/tmp/lalr3300" *)
  (* line 293 input.lalr *)
  
  IF yyAttributeStack^[yyStackPtr+2].Scan.Mode # Scanner.Empty
  THEN (* Binary *)
    yySynAttribute.Scan.Mode	:= Scanner.RightSide;
    yySynAttribute.Scan.Expr	:= MakeBinaryNode(Sequence, NoPosition, yyAttributeStack^[yyStackPtr+1].Scan.Expr, yyAttributeStack^[yyStackPtr+2].Scan.Expr);
  ELSE (* Expressions ist leer - Expression ist weiterzureichen *)
    yySynAttribute.Scan	:= yyAttributeStack^[yyStackPtr+1].Scan;
  END; 
  
  | 146: (* Expressions : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 58;
(* line 359 "/tmp/lalr3300" *)
  (* line 304 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.Empty;  (* noetig damit kein 'leeres Bein' entsteht *)
  yySynAttribute.Scan.Expr	:= NoExpression;   (* noetig falls Expr weiterverwendet wird *)
  
  | 147: (* Expression : Unit .*)
  DEC (yyStackPtr, 1); yyNonterminal := 59;
(* line 365 "/tmp/lalr3300" *)
  (* line 309 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:= yyAttributeStack^[yyStackPtr+1].Scan.Expr;
  
  | 148,75: (* Expression : Unit '*' .*)
  DEC (yyStackPtr, 2); yyNonterminal := 59;
(* line 372 "/tmp/lalr3300" *)
  (* line 314 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:= MakeUnaryNode(Star, yyAttributeStack^[yyStackPtr+2].Scan.Position, yyAttributeStack^[yyStackPtr+1].Scan.Expr);
  
  | 149,76: (* Expression : Unit '+' .*)
  DEC (yyStackPtr, 2); yyNonterminal := 59;
(* line 379 "/tmp/lalr3300" *)
  (* line 319 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:= MakeUnaryNode(Plus, yyAttributeStack^[yyStackPtr+2].Scan.Position, yyAttributeStack^[yyStackPtr+1].Scan.Expr);
  
  | 150,91: (* Expression : Unit '||' Unit .*)
  DEC (yyStackPtr, 3); yyNonterminal := 59;
(* line 386 "/tmp/lalr3300" *)
  (* line 324 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:= MakeBinaryNode(Separator, yyAttributeStack^[yyStackPtr+2].Scan.Position , yyAttributeStack^[yyStackPtr+1].Scan.Expr, yyAttributeStack^[yyStackPtr+3].Scan.Expr);
  
  | 151,77: (* Unit : '[' Alternative ']' .*)
  DEC (yyStackPtr, 3); yyNonterminal := 60;
(* line 394 "/tmp/lalr3300" *)
  (* line 330 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:= MakeBracketNode(Optional, yyAttributeStack^[yyStackPtr+1].Scan.Position, yyAttributeStack^[yyStackPtr+3].Scan.Position, yyAttributeStack^[yyStackPtr+2].Scan.Expr);
  
  | 152,78: (* Unit : '(' Alternative ')' .*)
  DEC (yyStackPtr, 3); yyNonterminal := 60;
(* line 401 "/tmp/lalr3300" *)
  (* line 335 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:= MakeBracketNode(Bracket, yyAttributeStack^[yyStackPtr+1].Scan.Position, yyAttributeStack^[yyStackPtr+3].Scan.Position, yyAttributeStack^[yyStackPtr+2].Scan.Expr);
  
  | 153,73: (* Unit : Identifier .*)
  DEC (yyStackPtr, 1); yyNonterminal := 60;
(* line 408 "/tmp/lalr3300" *)
  (* line 340 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:= MakeLeafNode(yyAttributeStack^[yyStackPtr+1].Scan.Sym, yyAttributeStack^[yyStackPtr+1].Scan.Position);
  
  | 154,74: (* Unit : String .*)
  DEC (yyStackPtr, 1); yyNonterminal := 60;
(* line 415 "/tmp/lalr3300" *)
  (* line 345 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:= MakeLeafNode(yyAttributeStack^[yyStackPtr+1].Scan.Sym, yyAttributeStack^[yyStackPtr+1].Scan.Position);
  
  | 155,72: (* Unit : Action .*)
  DEC (yyStackPtr, 1); yyNonterminal := 60;
(* line 422 "/tmp/lalr3300" *)
  (* line 350 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:= MakeActionNode (yyAttributeStack^[yyStackPtr+1].Scan.Act, yyAttributeStack^[yyStackPtr+1].Scan.Position);
  
  | 156,92: (* Alternative : Expressions '|' Alternative .*)
  DEC (yyStackPtr, 3); yyNonterminal := 61;
(* line 430 "/tmp/lalr3300" *)
  (* line 356 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  yySynAttribute.Scan.Expr	:= MakeBinaryNode (Alternative, yyAttributeStack^[yyStackPtr+2].Scan.Position, yyAttributeStack^[yyStackPtr+1].Scan.Expr, yyAttributeStack^[yyStackPtr+3].Scan.Expr);
  
  | 157: (* Alternative : Expressions .*)
  DEC (yyStackPtr, 1); yyNonterminal := 61;
(* line 437 "/tmp/lalr3300" *)
  (* line 361 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.RightSide;
  IF yyAttributeStack^[yyStackPtr+1].Scan.Mode = Scanner.Empty THEN
    yySynAttribute.Scan.Expr	:= NoExpression;
  ELSE
    yySynAttribute.Scan.Expr	:= yyAttributeStack^[yyStackPtr+1].Scan.Expr;
  END;
  
  | 158,63: (* CommentPart : CommentPart Comment .*)
  DEC (yyStackPtr, 2); yyNonterminal := 31;
(* line 449 "/tmp/lalr3300" *)
  (* line 371 input.lalr *)
  
  yySynAttribute.Scan.Mode	:= Scanner.Comment;
  IF IsEmpty (yyAttributeStack^[yyStackPtr+1].Scan.Comm) THEN
    yySynAttribute.Scan.Position	:= yyAttributeStack^[yyStackPtr+2].Scan.Position;
    yySynAttribute.Scan.Comm		:= yyAttributeStack^[yyStackPtr+2].Scan.Comm;
  ELSE
    Append (yyAttributeStack^[yyStackPtr+1].Scan.Comm, EndOfLine);
    WHILE NOT IsEmpty (yyAttributeStack^[yyStackPtr+2].Scan.Comm) DO
      Append (yyAttributeStack^[yyStackPtr+1].Scan.Comm, Head(yyAttributeStack^[yyStackPtr+2].Scan.Comm));
      Tail (yyAttributeStack^[yyStackPtr+2].Scan.Comm);
    END;
    yySynAttribute.Scan.Position	:= yyAttributeStack^[yyStackPtr+1].Scan.Position;
    yySynAttribute.Scan.Comm		:= yyAttributeStack^[yyStackPtr+1].Scan.Comm;
  END;
  
  | 159: (* CommentPart : .*)
  DEC (yyStackPtr, 0); yyNonterminal := 31;
(* line 467 "/tmp/lalr3300" *)
  (* line 387 input.lalr *)
  
  yySynAttribute.Scan.Mode		:= Scanner.Comment;
  yySynAttribute.Scan.Position	:= NoPosition;
  MakeList (yySynAttribute.Scan.Comm);
  
END;
	       (* SPEC State := Next (Top (), Nonterminal); nonterminal transition *)
	       yyNCombPtr := yyNCombTypePtr (LONGCARD (yyNBasePtr [yyStateStack^ [yyStackPtr]])
				+ yyNonterminal * SYSTEM.TSIZE (yyNCombType));
	       yyState := yyNCombPtr^;
	       INC (yyStackPtr);
	       yyAttributeStack^ [yyStackPtr] := yySynAttribute;
	       IF yyState < yyFirstFinalState THEN EXIT END; (* read nonterminal ? *)
	    END;

	 ELSE						(* read *)
	    INC (yyStackPtr);
	    yyAttributeStack^ [yyStackPtr].Scan := Scanner.Attribute;
	    yyTerminal := Scanner.GetToken ();
	    yyIsRepairing := FALSE;
	 END;
      END;
   END Parser;

PROCEDURE ErrorRecovery (
      VAR Terminal	: yySymbolRange	;
	  StateStack	: yyStackType	;
	  StackSize	: LONGINT	;
	  StackPtr	: LONGINT	);
   VAR
      TokensSkipped	: BOOLEAN;
      ContinueSet	: Sets.tSet;
      RestartSet	: Sets.tSet;
      Token		: yySymbolRange;
      TokenArray	: ARRAY [0..127] OF CHAR;
      TokenString	: Strings.tString;
      ContinueString	: Strings.tString;
   BEGIN
   (* 1. report the error *)
      Errors.ErrorMessage (Errors.SyntaxError, Errors.Error, Scanner.Attribute.Position);

   (* 2. report the set of expected terminal symbols *)
      Sets.MakeSet (ContinueSet, yyLastTerminal);
      ComputeContinuation (StateStack, StackSize, StackPtr, ContinueSet);
      Strings.AssignEmpty (ContinueString);
      FOR Token := Sets.Minimum (ContinueSet) TO Sets.Maximum (ContinueSet) DO
	 IF Sets.IsElement (Token, ContinueSet) THEN
	    TokenName (Token, TokenArray);
	    Strings.ArrayToString (TokenArray, TokenString);
	    IF (Strings.Length (ContinueString) + Strings.Length (TokenString) + 1 <= Strings.cMaxStrLength) THEN
	       Strings.Concatenate (ContinueString, TokenString);
	       Strings.Append (ContinueString, ' ');
	    END;
	 END;
      END;
      Errors.ErrorMessageI (Errors.ExpectedTokens, Errors.Information,
	 Scanner.Attribute.Position, Errors.String, SYSTEM.ADR (ContinueString));
      Sets.ReleaseSet (ContinueSet);

   (* 3. compute the set of terminal symbols for restart of the parse *)
      Sets.MakeSet (RestartSet, yyLastTerminal);
      ComputeRestartPoints (StateStack, StackSize, StackPtr, RestartSet);

   (* 4. skip terminal symbols until a restart point is reached *)
      TokensSkipped := FALSE;
      WHILE NOT Sets.IsElement (Terminal, RestartSet) DO
	 Terminal := Scanner.GetToken ();
	 TokensSkipped := TRUE;
      END;
      Sets.ReleaseSet (RestartSet);

   (* 5. report the restart point *)
      IF TokensSkipped THEN
	 Errors.ErrorMessage (Errors.RestartPoint, Errors.Information, Scanner.Attribute.Position);
      END;
   END ErrorRecovery;

(*
   compute the set of terminal symbols that can be accepted (read)
   in a given stack configuration (eventually after reduce actions)
*)

PROCEDURE ComputeContinuation (
	  Stack		: yyStackType	;
	  StackSize	: LONGINT	;
	  StackPtr	: LONGINT	;
      VAR ContinueSet	: Sets.tSet	);
   VAR Terminal		: yySymbolRange;
   BEGIN
      Sets.AssignEmpty (ContinueSet);
      FOR Terminal := yyFirstTerminal TO yyLastTerminal DO
	 IF IsContinuation (Terminal, Stack, StackSize, StackPtr) THEN
	    Sets.Include (ContinueSet, Terminal);
	 END;
      END;
   END ComputeContinuation;

(*
   check whether a given terminal symbol can be accepted (read)
   in a certain stack configuration (eventually after reduce actions)
*)

PROCEDURE IsContinuation (
      Terminal		: yySymbolRange	;
      ParseStack	: yyStackType	;
      StackSize		: LONGINT	;
      StackPtr		: LONGINT	): BOOLEAN;
   VAR
      State		: LONGINT;
      Nonterminal	: yySymbolRange;
      Stack		: yyStackType;
   BEGIN
      DynArray.MakeArray (Stack, StackSize, SYSTEM.TSIZE (yyStateRange));
      FOR State := 0 TO StackPtr DO
	 Stack^ [State] := ParseStack^ [State];
      END;
      State := Stack^ [StackPtr];
      LOOP
	 Stack^ [StackPtr] := State;
	 State := Next (State, Terminal);
	 IF State = yyNoState THEN
	    DynArray.ReleaseArray (Stack, StackSize, SYSTEM.TSIZE (yyStateRange));
	    RETURN FALSE;
	 END;
	 IF State <= yyLastReadTermState THEN		(* read or read terminal reduce ? *)
	    DynArray.ReleaseArray (Stack, StackSize, SYSTEM.TSIZE (yyStateRange));
	    RETURN TRUE;
	 END;

	 LOOP						(* reduce *)
	    IF State =	yyStopState THEN
	       DynArray.ReleaseArray (Stack, StackSize, SYSTEM.TSIZE (yyStateRange));
	       RETURN TRUE;
	    ELSE 
	       DEC (StackPtr, yyLength [State]);
	       Nonterminal := yyLeftHandSide [State];
	    END;

	    State := Next (Stack^ [StackPtr], Nonterminal);
	    IF StackPtr >= StackSize THEN
	       DynArray.ExtendArray (Stack, StackSize, SYSTEM.TSIZE (yyStateRange));
	    END;
	    INC (StackPtr);
	    IF State < yyFirstFinalState THEN EXIT; END; (* read nonterminal ? *)
	    State := yyFinalToProd [State];		(* read nonterminal reduce *)
	 END;
      END;
   END IsContinuation;

(*
   compute a set of terminal symbols that can be used to restart
   parsing in a given stack configuration. we simulate parsing until
   end of file using a suffix program synthesized by the function
   Continuation. All symbols acceptable in the states reached during
   the simulation can be used to restart parsing.
*)

PROCEDURE ComputeRestartPoints (
	  ParseStack	: yyStackType	;
	  StackSize	: LONGINT	;
	  StackPtr	: LONGINT	;
      VAR RestartSet	: Sets.tSet	);
   VAR
      Stack		: yyStackType;
      State		: LONGINT;
      Nonterminal	: yySymbolRange;
      ContinueSet	: Sets.tSet;
   BEGIN
      DynArray.MakeArray (Stack, StackSize, SYSTEM.TSIZE (yyStateRange));
      FOR State := 0 TO StackPtr DO
	 Stack^ [State] := ParseStack^ [State];
      END;
      Sets.MakeSet (ContinueSet, yyLastTerminal);
      Sets.AssignEmpty (RestartSet);
      State := Stack^ [StackPtr];

      LOOP
	 IF StackPtr >= StackSize THEN
	    DynArray.ExtendArray (Stack, StackSize, SYSTEM.TSIZE (yyStateRange));
	 END;
	 Stack^ [StackPtr] := State;
	 ComputeContinuation (Stack, StackSize, StackPtr, ContinueSet);
	 Sets.Union (RestartSet, ContinueSet);
	 State := Next (State, yyContinuation [State]);

	 IF State >= yyFirstFinalState THEN		(* final state ? *)
	    IF State <= yyLastReadTermState THEN	(* read terminal reduce ? *)
	       INC (StackPtr);
	       State := yyFinalToProd [State];
	    END;

	    LOOP					(* reduce *)
	       IF State = yyStopState THEN
		  DynArray.ReleaseArray (Stack, StackSize, SYSTEM.TSIZE (yyStateRange));
		  Sets.ReleaseSet (ContinueSet);
		  RETURN;
	       ELSE 
		  DEC (StackPtr, yyLength [State]);
		  Nonterminal := yyLeftHandSide [State];
	       END;

	       State := Next (Stack^ [StackPtr], Nonterminal);
	       INC (StackPtr);
	       IF State < yyFirstFinalState THEN EXIT; END; (* read nonterminal ? *)
	       State := yyFinalToProd [State];		(* read nonterminal reduce *)
	    END;
	 ELSE						(* read *)
	    INC (StackPtr);
	 END;
      END;
   END ComputeRestartPoints;

(* access the parse table:   Next : State x Symbol -> State *)

PROCEDURE Next (State: yyStateRange; Symbol: yySymbolRange): yyStateRange;
   VAR
      TCombPtr		: yyTCombTypePtr;
      NCombPtr		: yyNCombTypePtr;
   BEGIN
      IF Symbol <= yyLastTerminal THEN
	 LOOP
	    TCombPtr := yyTCombTypePtr (LONGCARD (yyTBasePtr [State]) 
			   + Symbol * SYSTEM.TSIZE (yyTCombType));
	    IF TCombPtr^.Check # State THEN
	       State := yyDefault [State];
	       IF State = yyNoState THEN RETURN yyNoState; END;
	    ELSE
	       RETURN TCombPtr^.Next;
	    END;
	 END;
      ELSE
	NCombPtr := yyNCombTypePtr (LONGCARD (yyNBasePtr [State]) 
			+ Symbol * SYSTEM.TSIZE (yyNCombType));
	RETURN NCombPtr^;
      END;
   END Next;

PROCEDURE yyGetTables;
   VAR
      BlockSize, j, n	: CARDINAL;
      State	: yyStateRange;
      TBase	: ARRAY [0 .. yyLastReadState] OF yyTCombRange;
      NBase	: ARRAY [0 .. yyLastReadState] OF yyNCombRange;
   BEGIN
      BlockSize	:= 64000 DIV SYSTEM.TSIZE (yyTCombType);
      yyTableFile := System.OpenInput (ParsTabName);
      yyErrorCheck (Errors.OpenParseTable, yyTableFile);
      IF 
	 (yyGetTable (SYSTEM.ADR (TBase	        )) DIV SYSTEM.TSIZE (yyTCombRange ) - 1
	    # yyLastReadState) OR
	 (yyGetTable (SYSTEM.ADR (NBase	        )) DIV SYSTEM.TSIZE (yyNCombRange ) - 1
	    # yyLastReadState) OR
	 (yyGetTable (SYSTEM.ADR (yyDefault     )) DIV SYSTEM.TSIZE (yyReadRange  ) - 1
	    # yyLastReadState) OR
	 (yyGetTable (SYSTEM.ADR (yyNComb       )) DIV SYSTEM.TSIZE (yyNCombType  )
	    # yyNTableMax - yyLastTerminal) OR
	 (yyGetTable (SYSTEM.ADR (yyLength      )) DIV SYSTEM.TSIZE (yyTableElmt  ) - 1
	    # yyLastReduceState - yyFirstReduceState) OR
	 (yyGetTable (SYSTEM.ADR (yyLeftHandSide)) DIV SYSTEM.TSIZE (yySymbolRange) - 1
	    # yyLastReduceState - yyFirstReduceState) OR
	 (yyGetTable (SYSTEM.ADR (yyContinuation)) DIV SYSTEM.TSIZE (yySymbolRange) - 1
	    # yyLastReadState) OR
	 (yyGetTable (SYSTEM.ADR (yyFinalToProd )) DIV SYSTEM.TSIZE (yyReduceRange) - 1
	    # yyLastReadNontermState - yyFirstReadTermState)
      THEN
	 Errors.ErrorMessage (Errors.WrongParseTable, Errors.Fatal, Positions.NoPosition);
      END;
      n := 0;
      j := 0;
      WHILE j <= yyTableMax DO
	 INC (n, yyGetTable (SYSTEM.ADR (yyTComb [j])) DIV SYSTEM.TSIZE (yyTCombType));
         INC (j, BlockSize);
      END;
      IF n # yyTableMax + 1 THEN 
	 Errors.ErrorMessage (Errors.WrongParseTable, Errors.Fatal, Positions.NoPosition);
      END;
      System.Close (yyTableFile);

      FOR State := 1 TO yyLastReadState DO
	 yyTBasePtr [State] := SYSTEM.ADR (yyTComb [TBase [State]]);
      END;
      FOR State := 1 TO yyLastReadState DO
	 yyNBasePtr [State] := SYSTEM.ADR (yyNComb [NBase [State]]);
      END;
   END yyGetTables;

PROCEDURE yyGetTable (Address: SYSTEM.ADDRESS): CARDINAL;
   VAR
      N		: INTEGER;
      Length	: yyTableElmt;
   BEGIN
      N := System.Read (yyTableFile, SYSTEM.ADR (Length), SYSTEM.TSIZE (yyTableElmt));
      yyErrorCheck (Errors.ReadParseTable, N);
      N := System.Read (yyTableFile, Address, Length);
      yyErrorCheck (Errors.ReadParseTable, N);
      RETURN Length;
   END yyGetTable;

PROCEDURE yyErrorCheck (ErrorCode: INTEGER; Info: INTEGER);
   VAR ErrNo: INTEGER;
   BEGIN
     IF Info < 0 THEN
	ErrNo := System.ErrNum ();
	Errors.ErrorMessageI (ErrorCode, Errors.Fatal, Positions.NoPosition,
	   Errors.Integer, SYSTEM.ADR (ErrNo));
     END;
   END yyErrorCheck;

PROCEDURE BeginParser;
   BEGIN
(* line 37 "/tmp/lalr3300" *)
(* line 55 input.lalr *)

  AssignEmpty (EndOfLineString);
  Strings.Append (EndOfLineString, cEol);
  EndOfLine := ADDRESS (PutString (EndOfLineString));

      IF NOT yyIsInitialized THEN
	 yyIsInitialized := TRUE;
	 yyGetTables;
      END;
   END BeginParser;

PROCEDURE CloseParser;
   BEGIN

   END CloseParser;

BEGIN
    yyIsInitialized := FALSE;
    ParsTabName := 'Parser.Tab';
END Parser.
