(* $Id: Scanner.mi,v 2.7 1992/10/13 16:05:28 grosch rel $ *)

IMPLEMENTATION MODULE Scanner;
 
IMPORT SYSTEM, Checks, System, General, Positions, IO, DynArray, Strings, Source;
(* line 70 "input.rex" *)


FROM SYSTEM	IMPORT ADR, ADDRESS;
FROM Strings	IMPORT tString, ArrayToString, Concatenate, SubString, AssignEmpty, Assign, Char, Length;
FROM StringMem	IMPORT tStringRef, PutString;
FROM Idents	IMPORT MakeIdent;
FROM Lists	IMPORT tList, Append, MakeList;
FROM Limits	IMPORT MaxShortCard;
FROM WriteTok	IMPORT tLanguage, Language;
FROM Errors	IMPORT eWarning, eError, eCharacter, eString, ErrorMessage, ErrorMessageI;
FROM Positions	IMPORT tPosition;

CONST
  eCharIgnored	= 10;
  eEolString	= 11;
  eUnClAction	= 12;
  eUnClComment	= 13;
  eUnClString	= 14;

  SymEqual	=  1;
  SymColon	=  2;
  SymPoint	=  3;
  SymOr		=  4;
  SymStar	=  5;
  SymPlus	=  6;
  SymList	=  7;
  SymLBrace	=  8;
  SymRBrace	=  9;
  SymLBracket	= 10;
  SymRBracket	= 11;
  SymEXPORT	= 12;
  SymGLOBAL	= 13;
  SymLOCAL	= 14;
  SymBEGIN	= 15;
  SymCLOSE	= 16;
  SymTOKEN	= 17;
  SymOPER	= 18;
  SymNONE	= 19;
  SymLEFT	= 20;
  SymRIGHT	= 21;
  SymRULE	= 22;
  SymPREC	= 23;
  SymComment	= 24; (* Schreibweise wie in MODULA-2		*)
  SymNumber	= 25; (* vorzeichenlose ganze Zahl		*)
  SymAction	= 26; (* in '{' und '}' eingeschlossene Aktion	*)
  SymIdentifier	= 27; (* letter (digit | letter) *		*)
  SymString	= 28; (* durch "'" oder '"' begrenzte Zeichenkette *)
  SymScanner	= 29;
  SymParser	= 30;

VAR level: INTEGER; Position: tPosition;

PROCEDURE ErrorAttribute (Token: INTEGER; VAR Attr: tScanAttribute);
  VAR s : tString;
  BEGIN
    ArrayToString ('-error-', s);
    CASE Token OF
      0: ;
    | 1..23:  Attr.Mode	:= Keys;
    | 	 24:  Attr.Mode	:= Comment;
	      MakeList (Attr.Comm);
    |    25:  Attr.Mode	:= Number;
	      Attr.Value:= MaxShortCard;
    |    26:  Attr.Mode	:= Action;
	      MakeList (Attr.Act);
    | 27,28:  Attr.Mode	:= Symbol;
	      Attr.Sym	:= MakeIdent (s);
    END;
  END ErrorAttribute;

PROCEDURE GetNumber (VAR Word: tString): CARDINAL;
  VAR i, n, d : CARDINAL;
   BEGIN
      i := 0;
      n := 0;
      WHILE i < Length (Word) DO
	i := i+1;
	d := (ORD(Char (Word, i))-ORD('0'));
	IF (n > MaxShortCard DIV 10) OR (n*10 > MaxShortCard - d) THEN
	  RETURN MaxShortCard;
	END;
	n := n*10 + d;
      END;
      RETURN n;
   END GetNumber;

 
CONST
   yyTabSpace		= 8;
   yyDNoState		= 0;
   yyFileStackSize	= 16;
   yyInitBufferSize	= 1024 * 8 + 256;
yyFirstCh	= 0C;
yyLastCh	= 177C;
yyEolCh	= 12C;
yyEobCh	= 177C;
yyDStateCount	= 163;
yyTableSize	= 1997;
yyEobState	= 47;
yyDefaultState	= 48;
STD	= 1;
token	= 3;
rule	= 5;
code	= 7;
Str1	= 9;
Str2	= 11;
CStr1	= 13;
CStr2	= 15;
comment	= 17;
comment2	= 19;
 
TYPE
   yyTableElmt		= SHORTCARD;
   yyStateRange		= yyTableElmt [0 .. yyDStateCount];
   yyTableRange		= yyTableElmt [0 .. yyTableSize];
   yyCombType		= RECORD Check, Next: yyStateRange; END;
   yyCombTypePtr	= POINTER TO yyCombType;
   yytChBufferPtr	= POINTER TO ARRAY [0 .. 1000000] OF CHAR;
   yyChRange		= [yyFirstCh .. yyLastCh];

VAR
   yyBasePtr		: ARRAY yyStateRange	OF LONGCARD	;
   yyDefault		: ARRAY yyStateRange	OF yyStateRange	;
   yyComb		: ARRAY yyTableRange	OF yyCombType	;
   yyEobTrans		: ARRAY yyStateRange	OF yyStateRange	;
   yyToLower, yyToUpper	: ARRAY yyChRange	OF CHAR		;

   yyStateStack		: POINTER TO ARRAY [0 .. 1000000] OF yyStateRange;
   yyStateStackSize	: LONGINT;
   yyStartState		: yyStateRange;
   yyPreviousStart	: yyStateRange;
   yyCh			: CHAR;
 
   yySourceFile		: System.tFile;
   yyEof		: BOOLEAN;
   yyChBufferPtr	: yytChBufferPtr;
   yyChBufferStart	: INTEGER;
   yyChBufferSize	: LONGINT;
   yyChBufferIndex	: INTEGER;
   yyBytesRead		: INTEGER;
   yyLineCount		: CARDINAL;
   yyLineStart		: INTEGER;

   yyFileStackPtr	: SHORTCARD;
   yyFileStack		: ARRAY [1 .. yyFileStackSize] OF RECORD
   			     SourceFile		: System.tFile;
			     Eof		: BOOLEAN;
   			     ChBufferPtr	: yytChBufferPtr;
			     ChBufferStart	: INTEGER;
			     ChBufferSize	: LONGINT;
   			     ChBufferIndex	: INTEGER;
   			     BytesRead		: INTEGER;
   			     LineCount		: CARDINAL;
   			     LineStart		: INTEGER;
			  END;

PROCEDURE GetToken (): INTEGER;
   VAR
      yyState		: yyStateRange;
      yyTablePtr	: yyCombTypePtr;
      yyRestartFlag	: BOOLEAN;
      yyi, yySource, yyTarget, yyChBufferFree	: INTEGER;
(* line 157 "input.rex" *)
 VAR Word, String, LastWord: tString; c: CHAR; PrevState: SHORTCARD; 
BEGIN
   LOOP
      yyState		:= yyStartState;
      TokenLength 	:= 0;
 
      (* ASSERT yyChBuffer [yyChBufferIndex] = first character *)
 
      LOOP		(* eventually restart after sentinel *)
	 LOOP		(* execute as many state transitions as possible *)
	    					(* determine next state *)
	    yyTablePtr := yyCombTypePtr (yyBasePtr [yyState] +
	       ORD (yyChBufferPtr^ [yyChBufferIndex]) * SYSTEM.TSIZE (yyCombType));
	    IF yyTablePtr^.Check # yyState THEN
	       yyState := yyDefault [yyState];
	       IF yyState = yyDNoState THEN EXIT; END;
	    ELSE
	       yyState := yyTablePtr^.Next;
	       INC (TokenLength);
	       yyStateStack^ [TokenLength] := yyState;	(* push state *)
	       INC (yyChBufferIndex);		(* get next character *)
	    END;
	 END;
 
	 LOOP					(* search for last final state *)
CASE yyStateStack^ [TokenLength] OF
|163
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 183 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymEqual	; 
yyRestartFlag := FALSE; EXIT;
|162
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 184 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymColon	; 
yyRestartFlag := FALSE; EXIT;
|161
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 185 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymPoint	; 
yyRestartFlag := FALSE; EXIT;
|157
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 186 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymOr	; 
yyRestartFlag := FALSE; EXIT;
|160
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 187 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymStar	; 
yyRestartFlag := FALSE; EXIT;
|159
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 188 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymPlus	; 
yyRestartFlag := FALSE; EXIT;
|158
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 189 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymList	; 
yyRestartFlag := FALSE; EXIT;
|156
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 190 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymLBrace	; 
yyRestartFlag := FALSE; EXIT;
|155
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 191 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymRBrace	; 
yyRestartFlag := FALSE; EXIT;
|154
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 192 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymLBracket	; 
yyRestartFlag := FALSE; EXIT;
|153
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 193 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymRBracket	; 
yyRestartFlag := FALSE; EXIT;
|152
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 194 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymScanner	; 
yyRestartFlag := FALSE; EXIT;
|145
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 195 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymParser	; 
yyRestartFlag := FALSE; EXIT;
|139
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 196 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymEXPORT	; 
yyRestartFlag := FALSE; EXIT;
|133
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 197 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymGLOBAL	; 
yyRestartFlag := FALSE; EXIT;
|127
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 198 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymLOCAL	; 
yyRestartFlag := FALSE; EXIT;
|122
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 199 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymBEGIN	; 
yyRestartFlag := FALSE; EXIT;
|117
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 200 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymCLOSE	; 
yyRestartFlag := FALSE; EXIT;
|112
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 201 "input.rex" *)
 Attribute.Mode := Keys; yyStart (token); RETURN SymTOKEN	; 
yyRestartFlag := FALSE; EXIT;
|107
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 203 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymOPER	; 
yyRestartFlag := FALSE; EXIT;
|103
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 204 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymNONE	; 
yyRestartFlag := FALSE; EXIT;
|99
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 205 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymLEFT	; 
yyRestartFlag := FALSE; EXIT;
|95
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 206 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymRIGHT	; 
yyRestartFlag := FALSE; EXIT;
|91
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 207 "input.rex" *)
 Attribute.Mode := Keys; yyStart (rule); RETURN SymRULE	; 
yyRestartFlag := FALSE; EXIT;
|87
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 209 "input.rex" *)
 Attribute.Mode := Keys; RETURN SymPREC	; 
yyRestartFlag := FALSE; EXIT;
|33
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 212 "input.rex" *)

  Attribute.Mode := Number;
  GetWord (Word);
  Attribute.Sym := MakeIdent (Word);
  Attribute.Value := GetNumber (Word);
  RETURN SymNumber;

yyRestartFlag := FALSE; EXIT;
|32
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 221 "input.rex" *)

  Attribute.Mode := Keys;
  GetWord (Word);
  SubString (Word, 2, Length (Word), String);
  Attribute.Sym := MakeIdent (String);
  RETURN SymIdentifier;

yyRestartFlag := FALSE; EXIT;
|30
,84
,85
,86
,88
,89
,90
,92
,93
,94
,96
,97
,98
,100
,101
,102
,104
,105
,106
,108
,109
,110
,111
,113
,114
,115
,116
,118
,119
,120
,121
,123
,124
,125
,126
,128
,129
,130
,131
,132
,134
,135
,136
,137
,138
,140
,141
,142
,143
,144
,146
,147
,148
,149
,150
,151
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 230 "input.rex" *)

  Attribute.Mode := Keys;
  GetWord (Word);
  Attribute.Sym := MakeIdent (Word);
  RETURN SymIdentifier;

yyRestartFlag := FALSE; EXIT;
|83
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 238 "input.rex" *)

  PrevState := yyStartState;
  Position := Attribute.Position;
  yyStart (code);
  GetWord (LastWord);
  Attribute.Mode := Action;
  MakeList (Attribute.Act);
  level := 1;

yyRestartFlag := FALSE; EXIT;
|31
:
(* line 248 "input.rex" *)

yyRestartFlag := FALSE; EXIT;
|81
,82
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 250 "input.rex" *)
 GetWord (String);
  			    Attribute.Mode := Symbol;
			    IF Language = C
			    THEN yyStart (CStr1);
			    ELSE yyStart (Str1);
			    END;
yyRestartFlag := FALSE; EXIT;
|79
,80
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 257 "input.rex" *)
 GetWord (String);
  			    Attribute.Mode := Symbol;
			    IF Language = C
			    THEN yyStart (CStr2);
			    ELSE yyStart (Str2);
			    END;
yyRestartFlag := FALSE; EXIT;
|27
,40
,53
:
(* line 267 "input.rex" *)
GetWord (Word); Concatenate (String, Word);
yyRestartFlag := FALSE; EXIT;
|25
,38
,54
:
(* line 267 "input.rex" *)
GetWord (Word); Concatenate (String, Word);
yyRestartFlag := FALSE; EXIT;
|24
,37
,44
,55
:
(* line 267 "input.rex" *)
GetWord (Word); Concatenate (String, Word);
yyRestartFlag := FALSE; EXIT;
|23
,36
,43
,56
:
(* line 267 "input.rex" *)
GetWord (Word); Concatenate (String, Word);
yyRestartFlag := FALSE; EXIT;
|78
:
(* line 269 "input.rex" *)
GetWord (Word); Concatenate (String, Word); yyEol (0);
yyRestartFlag := FALSE; EXIT;
|45
,77
:
(* line 272 "input.rex" *)
Strings.Append (String, Char (String, 1));
			    yyPrevious;
			    IF yyStartState = code THEN
			       Concatenate (LastWord, String);
			    ELSE
  			       Attribute.Sym := MakeIdent (String);
  			       RETURN SymString;
			    END;
yyRestartFlag := FALSE; EXIT;
|39
,76
:
(* line 272 "input.rex" *)
Strings.Append (String, Char (String, 1));
			    yyPrevious;
			    IF yyStartState = code THEN
			       Concatenate (LastWord, String);
			    ELSE
  			       Attribute.Sym := MakeIdent (String);
  			       RETURN SymString;
			    END;
yyRestartFlag := FALSE; EXIT;
|75
:
(* line 281 "input.rex" *)
Strings.Append (String, 11C); yyTab;
yyRestartFlag := FALSE; EXIT;
|74
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 283 "input.rex" *)
ErrorMessage (eEolString, eError, Attribute.Position);
			    Strings.Append (String, Char (String, 1));
			    yyEol (0); yyPrevious;
			    IF yyStartState = code THEN
			       Concatenate (LastWord, String);
			    ELSE
  			       Attribute.Sym := MakeIdent (String);
			       RETURN SymString;
			    END;
yyRestartFlag := FALSE; EXIT;
|73
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 294 "input.rex" *)

  yyStart (comment);
  GetWord (LastWord);
  Attribute.Mode := Comment;
  MakeList (Attribute.Comm);
  level := 1;

yyRestartFlag := FALSE; EXIT;
|71
:
(* line 302 "input.rex" *)
 yyStart (comment2); 
yyRestartFlag := FALSE; EXIT;
|29
,42
,70
,72
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 305 "input.rex" *)

  GetWord (Word);
  c := Char (Word, 1);
  ErrorMessageI (eCharIgnored, eWarning, Attribute.Position, eCharacter, ADR (c));

yyRestartFlag := FALSE; EXIT;
|28
,41
,52
:
(* line 312 "input.rex" *)

  GetWord (Word);
  Concatenate (LastWord, Word);

yyRestartFlag := FALSE; EXIT;
|26
:
Attribute.Position.Line   := yyLineCount;
Attribute.Position.Column := yyChBufferIndex - yyLineStart - TokenLength;
(* line 318 "input.rex" *)

  c := '\';
  ErrorMessageI (eCharIgnored, eWarning, Attribute.Position, eCharacter, ADR (c));

yyRestartFlag := FALSE; EXIT;
|69
:
(* line 324 "input.rex" *)

  yyTab;
  GetWord (Word);
  Concatenate (LastWord, Word);

yyRestartFlag := FALSE; EXIT;
|68
:
(* line 331 "input.rex" *)

  GetWord (Word);
  Concatenate (LastWord, Word);
  Append (Attribute.Act, ADDRESS (PutString (LastWord)));
  AssignEmpty (LastWord);
  yyEol (0);

yyRestartFlag := FALSE; EXIT;
|67
:
(* line 340 "input.rex" *)

  GetWord (Word);
  Concatenate (LastWord, Word);
  INC (level);

yyRestartFlag := FALSE; EXIT;
|66
:
(* line 347 "input.rex" *)

  DEC (level);
  GetWord (Word);
  Concatenate (LastWord, Word);
  IF level = 0 THEN
    yyStart (PrevState);
    Attribute.Position := Position;
    Append (Attribute.Act, ADDRESS (PutString (LastWord)));
    RETURN SymAction;
  END;

yyRestartFlag := FALSE; EXIT;
|65
:
(* line 360 "input.rex" *)

  GetWord (Word);
  Concatenate (LastWord, Word);
  INC (level);

yyRestartFlag := FALSE; EXIT;
|63
:
(* line 367 "input.rex" *)

  DEC (level);
  GetWord (Word);
  Concatenate (LastWord, Word);
  IF level = 0 THEN
    yyPrevious;
    Append (Attribute.Comm, ADDRESS (PutString (LastWord)));
    RETURN SymComment;
  END;

yyRestartFlag := FALSE; EXIT;
|22
,35
,57
,62
,64
:
(* line 379 "input.rex" *)

  GetWord (Word);
  Concatenate (LastWord, Word);

yyRestartFlag := FALSE; EXIT;
|61
:
(* line 385 "input.rex" *)

  yyTab;
  GetWord (Word);
  Concatenate (LastWord, Word);

yyRestartFlag := FALSE; EXIT;
|60
:
(* line 392 "input.rex" *)

  GetWord (Word);
  Concatenate (LastWord, Word);
  Append (Attribute.Comm, ADDRESS (PutString (LastWord)));
  AssignEmpty (LastWord);
  yyEol (0);

yyRestartFlag := FALSE; EXIT;
|21
,34
,58
:
(* line 400 "input.rex" *)
 
yyRestartFlag := FALSE; EXIT;
|59
:
(* line 401 "input.rex" *)
 yyPrevious; 
yyRestartFlag := FALSE; EXIT;
|51
:
(* BlankAction *)
WHILE yyChBufferPtr^ [yyChBufferIndex] = ' ' DO INC (yyChBufferIndex); END;
yyRestartFlag := FALSE; EXIT;
|50
:
(* TabAction *)
DEC (yyLineStart, 7 - (yyChBufferIndex - yyLineStart - 2) MOD 8);
yyRestartFlag := FALSE; EXIT;
|49
:
(* EolAction *)
INC (yyLineCount);
yyLineStart := yyChBufferIndex - 1;
yyRestartFlag := FALSE; EXIT;
|1
,2
,3
,4
,5
,6
,7
,8
,9
,10
,11
,12
,13
,14
,15
,16
,17
,18
,19
,20
,46
:
	    (* non final states *)
		  DEC (yyChBufferIndex);	(* return character *)
		  DEC (TokenLength)		(* pop state *)
 
| 48:
		  Attribute.Position.Line   := yyLineCount;
		  Attribute.Position.Column := yyChBufferIndex - yyLineStart;
		  INC (yyChBufferIndex);
		  TokenLength := 1;
IO.WriteC (IO.StdOutput, yyChBufferPtr^ [yyChBufferIndex-1]);
	          yyRestartFlag := FALSE; EXIT;

	    |  yyDNoState	:		(* automatic initialization *)
		  yyGetTables;
		  yyStateStack^ [0] := yyDefaultState; (* stack underflow sentinel *)
		  IF yyFileStackPtr = 0 THEN
		     yyInitialize;
		     yySourceFile := System.StdInput;
		  END;
	          yyRestartFlag := FALSE; EXIT;

| 47:
		  DEC (yyChBufferIndex);	(* undo last state transition *)
		  DEC (TokenLength);		(* get previous state *)
		  IF TokenLength = 0 THEN
		     yyState := yyStartState;
		  ELSE
		     yyState := yyStateStack^ [TokenLength];
		  END;

		  IF yyChBufferIndex # yyChBufferStart + yyBytesRead THEN
		     yyState := yyEobTrans [yyState];	(* end of buffer sentinel in buffer *)
		     IF yyState # yyDNoState THEN
			INC (yyChBufferIndex);
			INC (TokenLength);
			yyStateStack^ [TokenLength] := yyState;
			yyRestartFlag := TRUE; EXIT;
		     END;
		  ELSE				(* end of buffer reached *)

		     (* copy initial part of token in front of input buffer *)

		     yySource := yyChBufferIndex - TokenLength - 1;
		     yyTarget := General.MaxAlign - TokenLength MOD General.MaxAlign - 1;
		     IF yySource # yyTarget THEN
			FOR yyi := 1 TO TokenLength DO
			   yyChBufferPtr^ [yyTarget + yyi] := yyChBufferPtr^ [yySource + yyi];
			END;
			DEC (yyLineStart, yySource - yyTarget);
			yyChBufferStart := yyTarget + TokenLength + 1;
		     ELSE
			yyChBufferStart := yyChBufferIndex;
		     END;

		     IF NOT yyEof THEN		(* read buffer and restart *)
			yyChBufferFree := General.Exp2 (General.Log2 (yyChBufferSize - 4 - General.MaxAlign - TokenLength));
			IF yyChBufferFree < yyChBufferSize DIV 8 THEN
			   DynArray.ExtendArray (yyChBufferPtr, yyChBufferSize, SYSTEM.TSIZE (CHAR));
			   IF yyChBufferPtr = NIL THEN yyErrorMessage (1); END;
			   yyChBufferFree := General.Exp2 (General.Log2 (yyChBufferSize - 4 - General.MaxAlign - TokenLength));
			   IF yyStateStackSize < yyChBufferSize THEN
			      DynArray.ExtendArray (yyStateStack, yyStateStackSize, SYSTEM.TSIZE (yyStateRange));
			      IF yyStateStack = NIL THEN yyErrorMessage (1); END;
			   END;
			END;
			yyChBufferIndex := yyChBufferStart;
			yyBytesRead := Source.GetLine (yySourceFile, SYSTEM.ADR
			   (yyChBufferPtr^ [yyChBufferIndex]), yyChBufferFree);
			IF yyBytesRead <= 0 THEN yyBytesRead := 0; yyEof := TRUE; END;
			yyChBufferPtr^ [yyChBufferStart + yyBytesRead    ] := yyEobCh;
			yyChBufferPtr^ [yyChBufferStart + yyBytesRead + 1] := 0C;
			yyRestartFlag := TRUE; EXIT;
		     END;

		     IF TokenLength = 0 THEN	(* end of file reached *)
			Attribute.Position.Line   := yyLineCount;
			Attribute.Position.Column := yyChBufferIndex - yyLineStart;
			CloseFile;
			IF yyFileStackPtr = 0 THEN
(* line 159 "input.rex" *)

CASE yyStartState OF
| code			: ErrorMessage (eUnClAction , eError, Attribute.Position);
| comment, comment2	: ErrorMessage (eUnClComment, eError, Attribute.Position);
| Str1, Str2, CStr1, CStr2:ErrorMessage (eUnClString, eError, Attribute.Position);
ELSE
END;

			END;
			IF yyFileStackPtr = 0 THEN RETURN EofToken; END;
			yyRestartFlag := FALSE; EXIT;
		     END;
		  END;
	    ELSE
	       yyErrorMessage (0);
	    END;
	 END;
	 IF yyRestartFlag THEN ELSE EXIT; END;
      END;
   END;
   END GetToken;
 
PROCEDURE BeginFile (FileName: ARRAY OF CHAR);
   BEGIN
      IF yyStateStack^ [0] = yyDNoState THEN	(* have tables been read in ? *)
	 yyGetTables;
	 yyStateStack^ [0] := yyDefaultState;	(* stack underflow sentinel *)
      END;
      yyInitialize;
      yySourceFile := Source.BeginSource (FileName);
      IF yySourceFile < 0 THEN yyErrorMessage (5); END;
   END BeginFile;

PROCEDURE yyInitialize;
   BEGIN
      IF yyFileStackPtr >= yyFileStackSize THEN yyErrorMessage (3); END;
      INC (yyFileStackPtr);			(* push file *)
      WITH yyFileStack [yyFileStackPtr] DO
	 SourceFile	:= yySourceFile		;
	 Eof		:= yyEof		;
	 ChBufferPtr	:= yyChBufferPtr	;
	 ChBufferStart	:= yyChBufferStart	;
	 ChBufferSize	:= yyChBufferSize	;
	 ChBufferIndex	:= yyChBufferIndex	;
	 BytesRead	:= yyBytesRead		;
	 LineCount	:= yyLineCount		;
	 LineStart	:= yyLineStart		;
      END;
						(* initialize file state *)
      yyChBufferSize	:= yyInitBufferSize;
      DynArray.MakeArray (yyChBufferPtr, yyChBufferSize, SYSTEM.TSIZE (CHAR));
      IF yyChBufferPtr = NIL THEN yyErrorMessage (1); END;
      yyChBufferStart	:= General.MaxAlign;
      yyChBufferPtr^ [yyChBufferStart - 1] := yyEolCh; (* begin of line indicator *)
      yyChBufferPtr^ [yyChBufferStart    ] := yyEobCh; (* end of buffer sentinel *)
      yyChBufferPtr^ [yyChBufferStart + 1] := 0C;
      yyChBufferIndex	:= yyChBufferStart;
      yyEof		:= FALSE;
      yyBytesRead	:= 0;
      yyLineCount	:= 1;
      yyLineStart	:= yyChBufferStart - 1;
   END yyInitialize;

PROCEDURE CloseFile;
   BEGIN
      IF yyFileStackPtr = 0 THEN yyErrorMessage (4); END;
      Source.CloseSource (yySourceFile);
      DynArray.ReleaseArray (yyChBufferPtr, yyChBufferSize, SYSTEM.TSIZE (CHAR));
      WITH yyFileStack [yyFileStackPtr] DO	(* pop file *)
	 yySourceFile	:= SourceFile		;
	 yyEof		:= Eof			;
	 yyChBufferPtr	:= ChBufferPtr		;
	 yyChBufferStart:= ChBufferStart	;
	 yyChBufferSize	:= ChBufferSize		;
	 yyChBufferIndex:= ChBufferIndex	;
	 yyBytesRead	:= BytesRead		;
	 yyLineCount	:= LineCount		;
	 yyLineStart	:= LineStart		;
      END;
      DEC (yyFileStackPtr);		
   END CloseFile;

PROCEDURE GetWord (VAR Word: Strings.tString);
   VAR i, WordStart	: INTEGER;
   BEGIN
      WordStart := yyChBufferIndex - TokenLength - 1;
      FOR i := 1 TO TokenLength DO
	 Word.Chars [i] := yyChBufferPtr^ [WordStart + i];
      END;
      Word.Length := TokenLength;
   END GetWord;
 
PROCEDURE GetLower (VAR Word: Strings.tString);
   VAR i, WordStart	: INTEGER;
   BEGIN
      WordStart := yyChBufferIndex - TokenLength - 1;
      FOR i := 1 TO TokenLength DO
	 Word.Chars [i] := yyToLower [yyChBufferPtr^ [WordStart + i]];
      END;
      Word.Length := TokenLength;
   END GetLower;
 
PROCEDURE GetUpper (VAR Word: Strings.tString);
   VAR i, WordStart	: INTEGER;
   BEGIN
      WordStart := yyChBufferIndex - TokenLength - 1;
      FOR i := 1 TO TokenLength DO
	 Word.Chars [i] := yyToUpper [yyChBufferPtr^ [WordStart + i]];
      END;
      Word.Length := TokenLength;
   END GetUpper;
 
PROCEDURE yyStart (State: yyStateRange);
   BEGIN
      yyPreviousStart	:= yyStartState;
      yyStartState	:= State;
   END yyStart;
 
PROCEDURE yyPrevious;
   VAR s	: yyStateRange;
   BEGIN
      s		      := yyStartState;
      yyStartState    := yyPreviousStart;
      yyPreviousStart := s;
   END yyPrevious;
 
PROCEDURE yyEcho;
   VAR i	: INTEGER;
   BEGIN
      FOR i := yyChBufferIndex - TokenLength TO yyChBufferIndex - 1 DO
	 IO.WriteC (IO.StdOutput, yyChBufferPtr^ [i]);
      END;
   END yyEcho;
 
PROCEDURE yyLess (n: INTEGER);
   BEGIN
      DEC (yyChBufferIndex, TokenLength - n);
      TokenLength := n;
   END yyLess;
 
PROCEDURE yyTab;
   BEGIN
      DEC (yyLineStart, yyTabSpace - 1 - (yyChBufferIndex - yyLineStart - 2) MOD yyTabSpace);
   END yyTab;

PROCEDURE yyTab1 (a: INTEGER);
   BEGIN
      DEC (yyLineStart, yyTabSpace - 1 - (yyChBufferIndex - yyLineStart - TokenLength + a - 1) MOD yyTabSpace);
   END yyTab1;

PROCEDURE yyTab2 (a, b: INTEGER);
   BEGIN
      DEC (yyLineStart, yyTabSpace - 1 - (yyChBufferIndex - yyLineStart - TokenLength + a - 1) MOD yyTabSpace);
   END yyTab2;

PROCEDURE yyEol (Column: INTEGER);
   BEGIN
      INC (yyLineCount);
      yyLineStart := yyChBufferIndex - 1 - Column;
   END yyEol;

PROCEDURE output (c: CHAR);
   BEGIN
      IO.WriteC (IO.StdOutput, c);
   END output;

PROCEDURE unput (c: CHAR);
   BEGIN
      DEC (yyChBufferIndex);
      yyChBufferPtr^ [yyChBufferIndex] := c;
   END unput;

PROCEDURE input (): CHAR;
   BEGIN
      IF yyChBufferIndex = yyChBufferStart + yyBytesRead THEN
	 IF NOT yyEof THEN
	    DEC (yyLineStart, yyBytesRead);
	    yyChBufferIndex := 0;
	    yyChBufferStart := 0;
	    yyBytesRead := Source.GetLine (yySourceFile, yyChBufferPtr, General.Exp2 (General.Log2 (yyChBufferSize)));
	    IF yyBytesRead <= 0 THEN yyBytesRead := 0; yyEof := TRUE; END;
	    yyChBufferPtr^ [yyBytesRead    ] := yyEobCh;
	    yyChBufferPtr^ [yyBytesRead + 1] := 0C;
	 END;
      END;
      IF yyChBufferIndex = yyChBufferStart + yyBytesRead THEN
	 RETURN 0C;
      ELSE
	 INC (yyChBufferIndex);
	 RETURN yyChBufferPtr^ [yyChBufferIndex - 1];
      END
   END input;

PROCEDURE BeginScanner;
   BEGIN
   END BeginScanner;
 
PROCEDURE CloseScanner;
   BEGIN
   END CloseScanner;
 
PROCEDURE yyGetTables;
   VAR
      BlockSize, j, n	: CARDINAL;
      TableFile	: System.tFile;
      i		: yyStateRange;
      Base	: ARRAY yyStateRange OF yyTableRange;
   BEGIN
      BlockSize	:= 64000 DIV SYSTEM.TSIZE (yyCombType);
      TableFile := System.OpenInput (ScanTabName);
      Checks.ErrorCheck ("yyGetTables.OpenInput", TableFile);
      IF (yyGetTable (TableFile, SYSTEM.ADR (Base      )) DIV SYSTEM.TSIZE (yyTableElmt) - 1 # yyDStateCount) OR
         (yyGetTable (TableFile, SYSTEM.ADR (yyDefault )) DIV SYSTEM.TSIZE (yyTableElmt) - 1 # yyDStateCount) OR
         (yyGetTable (TableFile, SYSTEM.ADR (yyEobTrans)) DIV SYSTEM.TSIZE (yyTableElmt) - 1 # yyDStateCount)
	 THEN
	 yyErrorMessage (2);
      END;
      n := 0;
      j := 0;
      WHILE j <= yyTableSize DO
         INC (n, yyGetTable (TableFile, SYSTEM.ADR (yyComb [j])) DIV SYSTEM.TSIZE (yyCombType));
         INC (j, BlockSize);
      END;
      IF n # yyTableSize + 1 THEN yyErrorMessage (2); END;
      System.Close (TableFile);

      FOR i := 0 TO yyDStateCount DO
	 yyBasePtr [i] := LONGCARD (SYSTEM.ADR (yyComb [Base [i]]));
      END;
   END yyGetTables;
 
PROCEDURE yyGetTable (TableFile: System.tFile; Address: SYSTEM.ADDRESS): CARDINAL;
   VAR
      N		: INTEGER;
      Length	: yyTableElmt;
   BEGIN
      N := System.Read (TableFile, SYSTEM.ADR (Length), SYSTEM.TSIZE (yyTableElmt));
      Checks.ErrorCheck ("yyGetTable.Read1", N);
      N := System.Read (TableFile, Address, Length);
      Checks.ErrorCheck ("yyGetTable.Read2", N);
      RETURN Length;
   END yyGetTable;
 
PROCEDURE yyErrorMessage (ErrorCode: SHORTCARD);
   BEGIN
      Positions.WritePosition (IO.StdError, Attribute.Position);
      CASE ErrorCode OF
   | 0: IO.WriteS (IO.StdError, ": Scanner: internal error");
   | 1: IO.WriteS (IO.StdError, ": Scanner: out of memory");
   | 2: IO.WriteS (IO.StdError, ": Scanner: table mismatch");
   | 3: IO.WriteS (IO.StdError, ": Scanner: too many nested include files");
   | 4: IO.WriteS (IO.StdError, ": Scanner: file stack underflow (too many calls of CloseFile)");
   | 5: IO.WriteS (IO.StdError, ": Scanner: cannot open input file");
      END;
      IO.WriteNl (IO.StdError); Exit;
   END yyErrorMessage;
 
PROCEDURE yyExit;
   BEGIN
      IO.CloseIO; System.Exit (1);
   END yyExit;

BEGIN
   ScanTabName		:= "Scanner.Tab";
   Exit			:= yyExit;
   yyFileStackPtr	:= 0;
   yyStartState		:= 1;			(* set up for auto init *)
   yyPreviousStart	:= 1;
   yyBasePtr [yyStartState] := LONGCARD (SYSTEM.ADR (yyComb [0]));
   yyDefault [yyStartState] := yyDNoState;
   yyComb [0].Check	:= yyDNoState;
   yyChBufferPtr	:= SYSTEM.ADR (yyComb [0]);	(* dirty trick *)
   yyChBufferIndex	:= 1;				(* dirty trick *)
   yyStateStackSize	:= yyInitBufferSize;
   DynArray.MakeArray (yyStateStack, yyStateStackSize, SYSTEM.TSIZE (yyStateRange));
   yyStateStack^ [0]	:= yyDNoState;
   
   FOR yyCh := yyFirstCh TO yyLastCh DO yyToLower [yyCh] := yyCh; END;
   yyToUpper := yyToLower;
   FOR yyCh := 'A' TO 'Z' DO
      yyToLower [yyCh] := CHR (ORD (yyCh) - ORD ('A') + ORD ('a'));
   END;
   FOR yyCh := 'a' TO 'z' DO
      yyToUpper [yyCh] := CHR (ORD (yyCh) - ORD ('a') + ORD ('A'));
   END;
END Scanner.
